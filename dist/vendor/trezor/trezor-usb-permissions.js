/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!**********************************************************************!*\
  !*** ./src/infrastructure/hardware/trezor/trezor-usb-permissions.ts ***!
  \**********************************************************************/

const VERSION = '8.2.8-beta.4';
const versionN = VERSION.split('.').map((s) => parseInt(s, 10));
// const DIRECTORY = `${ versionN[0] }${ (versionN[1] > 0 ? `.${versionN[1]}` : '') }/`;
const DIRECTORY = `${versionN[0]}/`;
const url = `https://connect.trezor.io/${DIRECTORY}`;
/* Handling messages from usb permissions iframe */
const switchToPopupTab = (event) => {
    window.removeEventListener('beforeunload', switchToPopupTab);
    if (!event) {
        // triggered from 'usb-permissions-close' message
        // close current tab
        chrome.tabs.query({
            currentWindow: true,
            active: true,
        }, (current) => {
            if (current.length <= 0)
                return;
            const id = current[0].id;
            chrome.tabs.remove(Number(id));
        });
    }
    // find tab by popup pattern and switch to it
    chrome.tabs.query({
        url: `${url}popup.html`,
    }, (tabs) => {
        if (tabs.length <= 0)
            return;
        const id = tabs[0].id;
        chrome.tabs.update(Number(id), { active: true });
    });
};
window.addEventListener('message', (event) => {
    var _a;
    if (event.data === 'usb-permissions-init') {
        const iframe = document.getElementById('trezor-usb-permissions');
        if (!iframe || !(iframe instanceof HTMLIFrameElement)) {
            throw new Error('trezor-usb-permissions missing or incorrect dom type');
        }
        (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
            type: 'usb-permissions-init',
            extension: chrome.runtime.id,
        }, '*');
    }
    else if (event.data === 'usb-permissions-close') {
        switchToPopupTab();
    }
});
window.addEventListener('beforeunload', switchToPopupTab);
window.addEventListener('load', () => {
    const instance = document.createElement('iframe');
    instance.id = 'trezor-usb-permissions';
    instance.frameBorder = '0';
    instance.width = '100%';
    instance.height = '100%';
    instance.style.border = '0px';
    instance.style.width = '100%';
    instance.style.height = '100%';
    instance.setAttribute('src', `${url}extension-permissions.html`);
    instance.setAttribute('allow', 'usb');
    if (document.body) {
        document.body.appendChild(instance);
    }
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxDQUFDO0lBQ2xELFFBQVEsQ0FBQyxFQUFFLEdBQUcsd0JBQXdCLENBQUM7SUFDdkMsUUFBUSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7SUFDM0IsUUFBUSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDeEIsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQzlCLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztJQUM5QixRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDL0IsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxHQUFHLDRCQUE0QixDQUFDLENBQUM7SUFDakUsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFdEMsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFO1FBQ2YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDdkM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BibG9jay13YWxsZXQvYmFja2dyb3VuZC8uL3NyYy9pbmZyYXN0cnVjdHVyZS9oYXJkd2FyZS90cmV6b3IvdHJlem9yLXVzYi1wZXJtaXNzaW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBWRVJTSU9OID0gJzguMi44LWJldGEuNCc7XHJcbmNvbnN0IHZlcnNpb25OID0gVkVSU0lPTi5zcGxpdCgnLicpLm1hcCgocykgPT4gcGFyc2VJbnQocywgMTApKTtcclxuLy8gY29uc3QgRElSRUNUT1JZID0gYCR7IHZlcnNpb25OWzBdIH0keyAodmVyc2lvbk5bMV0gPiAwID8gYC4ke3ZlcnNpb25OWzFdfWAgOiAnJykgfS9gO1xyXG5jb25zdCBESVJFQ1RPUlkgPSBgJHt2ZXJzaW9uTlswXX0vYDtcclxuY29uc3QgdXJsID0gYGh0dHBzOi8vY29ubmVjdC50cmV6b3IuaW8vJHtESVJFQ1RPUll9YDtcclxuXHJcbi8qIEhhbmRsaW5nIG1lc3NhZ2VzIGZyb20gdXNiIHBlcm1pc3Npb25zIGlmcmFtZSAqL1xyXG5jb25zdCBzd2l0Y2hUb1BvcHVwVGFiID0gKGV2ZW50PzogYW55KSA9PiB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgc3dpdGNoVG9Qb3B1cFRhYik7XHJcblxyXG4gICAgaWYgKCFldmVudCkge1xyXG4gICAgICAgIC8vIHRyaWdnZXJlZCBmcm9tICd1c2ItcGVybWlzc2lvbnMtY2xvc2UnIG1lc3NhZ2VcclxuICAgICAgICAvLyBjbG9zZSBjdXJyZW50IHRhYlxyXG4gICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50V2luZG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoY3VycmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQubGVuZ3RoIDw9IDApIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gY3VycmVudFswXS5pZDtcclxuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnJlbW92ZShOdW1iZXIoaWQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZmluZCB0YWIgYnkgcG9wdXAgcGF0dGVybiBhbmQgc3dpdGNoIHRvIGl0XHJcbiAgICBjaHJvbWUudGFicy5xdWVyeShcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHVybDogYCR7dXJsfXBvcHVwLmh0bWxgLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKHRhYnMpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRhYnMubGVuZ3RoIDw9IDApIHJldHVybjtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSB0YWJzWzBdLmlkO1xyXG4gICAgICAgICAgICBjaHJvbWUudGFicy51cGRhdGUoTnVtYmVyKGlkKSwgeyBhY3RpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxufTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQuZGF0YSA9PT0gJ3VzYi1wZXJtaXNzaW9ucy1pbml0Jykge1xyXG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cmV6b3ItdXNiLXBlcm1pc3Npb25zJyk7XHJcbiAgICAgICAgaWYgKCFpZnJhbWUgfHwgIShpZnJhbWUgaW5zdGFuY2VvZiBIVE1MSUZyYW1lRWxlbWVudCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICAgICAgJ3RyZXpvci11c2ItcGVybWlzc2lvbnMgbWlzc2luZyBvciBpbmNvcnJlY3QgZG9tIHR5cGUnXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93Py5wb3N0TWVzc2FnZShcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3VzYi1wZXJtaXNzaW9ucy1pbml0JyxcclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbjogY2hyb21lLnJ1bnRpbWUuaWQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICcqJ1xyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50LmRhdGEgPT09ICd1c2ItcGVybWlzc2lvbnMtY2xvc2UnKSB7XHJcbiAgICAgICAgc3dpdGNoVG9Qb3B1cFRhYigpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBzd2l0Y2hUb1BvcHVwVGFiKTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xyXG4gICAgaW5zdGFuY2UuaWQgPSAndHJlem9yLXVzYi1wZXJtaXNzaW9ucyc7XHJcbiAgICBpbnN0YW5jZS5mcmFtZUJvcmRlciA9ICcwJztcclxuICAgIGluc3RhbmNlLndpZHRoID0gJzEwMCUnO1xyXG4gICAgaW5zdGFuY2UuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgaW5zdGFuY2Uuc3R5bGUuYm9yZGVyID0gJzBweCc7XHJcbiAgICBpbnN0YW5jZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgIGluc3RhbmNlLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgIGluc3RhbmNlLnNldEF0dHJpYnV0ZSgnc3JjJywgYCR7dXJsfWV4dGVuc2lvbi1wZXJtaXNzaW9ucy5odG1sYCk7XHJcbiAgICBpbnN0YW5jZS5zZXRBdHRyaWJ1dGUoJ2FsbG93JywgJ3VzYicpO1xyXG5cclxuICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbnN0YW5jZSk7XHJcbiAgICB9XHJcbn0pO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=