/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/utils/types/communication.ts":
/*!******************************************!*\
  !*** ./src/utils/types/communication.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BackgroundActions": () => (/* binding */ BackgroundActions),
/* harmony export */   "CONTENT": () => (/* binding */ CONTENT),
/* harmony export */   "EXTERNAL": () => (/* binding */ EXTERNAL),
/* harmony export */   "Messages": () => (/* binding */ Messages),
/* harmony export */   "Origin": () => (/* binding */ Origin)
/* harmony export */ });
var ACCOUNT;
(function (ACCOUNT) {
    ACCOUNT["CREATE"] = "CREATE_ACCOUNT";
    ACCOUNT["EXPORT_JSON"] = "EXPORT_ACCOUNT_JSON";
    ACCOUNT["EXPORT_PRIVATE_KEY"] = "EXPORT_ACCOUNT_PK";
    ACCOUNT["IMPORT_JSON"] = "IMPORT_ACCOUNT_JSON";
    ACCOUNT["IMPORT_PRIVATE_KEY"] = "IMPORT_ACCOUNT_PK";
    ACCOUNT["REMOVE"] = "REMOVE_ACCOUNT";
    ACCOUNT["RESET"] = "RESET_ACCOUNT";
    ACCOUNT["RENAME"] = "RENAME_ACCOUNT";
    ACCOUNT["SELECT"] = "SELECT_ACCOUNT";
    ACCOUNT["GET_BALANCE"] = "GET_ACCOUNT_BALANCE";
    ACCOUNT["HIDE"] = "HIDE_ACCOUNT";
    ACCOUNT["UNHIDE"] = "UNHIDE_ACCOUNT";
    ACCOUNT["GET_NATIVE_TOKEN_BALANCE"] = "GET_NATIVE_TOKEN_BALANCE";
})(ACCOUNT || (ACCOUNT = {}));
var APP;
(function (APP) {
    APP["LOCK"] = "LOCK_APP";
    APP["UNLOCK"] = "UNLOCK_APP";
    APP["GET_IDLE_TIMEOUT"] = "GET_IDLE_TIMEOUT";
    APP["SET_IDLE_TIMEOUT"] = "SET_IDLE_TIMEOUT";
    APP["SET_LAST_USER_ACTIVE_TIME"] = "SET_LAST_USER_ACTIVE_TIME";
    APP["RETURN_TO_ONBOARDING"] = "RETURN_TO_ONBOARDING";
    APP["OPEN_RESET"] = "OPEN_RESET";
    APP["OPEN_HW_CONNECT"] = "OPEN_HW_CONNECT";
    APP["OPEN_HW_REMOVE"] = "OPEN_HW_REMOVE";
    APP["OPEN_HW_RECONNECT"] = "OPEN_HW_RECONNECT";
    APP["SET_USER_SETTINGS"] = "SET_USER_SETTINGS";
    APP["UPDATE_POPUP_TAB"] = "UPDATE_POPUP_TAB";
    APP["REJECT_UNCONFIRMED_REQUESTS"] = "REJECT_UNCONFIRMED_REQUESTS";
    APP["SET_USER_ONLINE"] = "SET_USER_ONLINE";
})(APP || (APP = {}));
var BACKGROUND;
(function (BACKGROUND) {
    BACKGROUND["ACTION"] = "ACTION";
})(BACKGROUND || (BACKGROUND = {}));
var DAPP;
(function (DAPP) {
    DAPP["CONFIRM_REQUEST"] = "CONFIRM_DAPP_REQUEST";
    DAPP["ATTEMPT_REJECT_REQUEST"] = "ATTEMPT_REJECT_DAPP_REQUEST";
})(DAPP || (DAPP = {}));
var EXCHANGE;
(function (EXCHANGE) {
    EXCHANGE["CHECK_ALLOWANCE"] = "CHECK_ALLOWANCE";
    EXCHANGE["APPROVE"] = "APPROVE_EXCHANGE";
    EXCHANGE["GET_QUOTE"] = "GET_EXCHANGE_QUOTE";
    EXCHANGE["GET_EXCHANGE"] = "GET_EXCHANGE";
    EXCHANGE["EXECUTE"] = "EXECUTE_EXCHANGE";
})(EXCHANGE || (EXCHANGE = {}));
var BRIDGE;
(function (BRIDGE) {
    BRIDGE["APPROVE_BRIDGE_ALLOWANCE"] = "APPROVE_BRIDGE_ALLOWANCE";
    BRIDGE["GET_BRIDGE_AVAILABLE_CHAINS"] = "GET_BRIDGE_AVAILABLE_CHAINS";
    BRIDGE["GET_BRIDGE_TOKENS"] = "GET_BRIDGE_TOKENS";
    BRIDGE["GET_BRIDGE_QUOTE"] = "GET_BRIDGE_QUOTE";
    BRIDGE["GET_BRIDGE_ROUTES"] = "GET_BRIDGE_ROUTES";
    BRIDGE["EXECUTE_BRIDGE"] = "EXECUTE_BRIDGE";
})(BRIDGE || (BRIDGE = {}));
var EXTERNAL;
(function (EXTERNAL) {
    EXTERNAL["EVENT_SUBSCRIPTION"] = "EVENT_SUBSCRIPTION";
    EXTERNAL["REQUEST"] = "EXTERNAL_REQUEST";
    EXTERNAL["SETUP_PROVIDER"] = "SETUP_PROVIDER";
    EXTERNAL["SW_REINIT"] = "SW_REINIT";
    EXTERNAL["SET_ICON"] = "SET_ICON";
    EXTERNAL["GET_PROVIDER_CONFIG"] = "GET_PROVIDER_CONFIG";
})(EXTERNAL || (EXTERNAL = {}));
var CONTENT;
(function (CONTENT) {
    CONTENT["SHOULD_INJECT"] = "SHOULD_INJECT";
    CONTENT["SW_KEEP_ALIVE"] = "SW_KEEP_ALIVE";
})(CONTENT || (CONTENT = {}));
var NETWORK;
(function (NETWORK) {
    NETWORK["CHANGE"] = "NETWORK_CHANGE";
    NETWORK["SET_SHOW_TEST_NETWORKS"] = "SHOW_TEST_NETWORKS";
    NETWORK["ADD_NETWORK"] = "ADD_NETWORK";
    NETWORK["EDIT_NETWORK"] = "EDIT_NETWORK";
    NETWORK["EDIT_NETWORKS_ORDER"] = "EDIT_NETWORKS_ORDER";
    NETWORK["REMOVE_NETWORK"] = "REMOVE_NETWORK";
    NETWORK["GET_SPECIFIC_CHAIN_DETAILS"] = "GET_SPECIFIC_CHAIN_DETAILS";
    NETWORK["GET_RPC_CHAIN_ID"] = "GET_RPC_CHAIN_ID";
    NETWORK["SEARCH_CHAINS"] = "SEARCH_CHAINS";
})(NETWORK || (NETWORK = {}));
var PASSWORD;
(function (PASSWORD) {
    PASSWORD["VERIFY"] = "VERIFY_PASSWORD";
    PASSWORD["CHANGE"] = "CHANGE_PASSWORD";
})(PASSWORD || (PASSWORD = {}));
var PERMISSION;
(function (PERMISSION) {
    PERMISSION["ADD_NEW"] = "ADD_NEW_SITE_PERMISSIONS";
    PERMISSION["CONFIRM"] = "CONFIRM_PERMISSION_REQUEST";
    PERMISSION["GET_ACCOUNT_PERMISSIONS"] = "GET_ACCOUNT_PERMISSIONS";
    PERMISSION["REMOVE_ACCOUNT_FROM_SITE"] = "REMOVE_ACCOUNT_FROM_SITE";
    PERMISSION["UPDATE_SITE_PERMISSIONS"] = "UPDATE_SITE_PERMISSIONS";
})(PERMISSION || (PERMISSION = {}));
var STATE;
(function (STATE) {
    STATE["GET"] = "GET_STATE";
    STATE["SUBSCRIBE"] = "STATE_SUBSCRIBE";
    STATE["GET_REMOTE_CONFIG"] = "GET_REMOTE_CONFIG";
})(STATE || (STATE = {}));
var ENS;
(function (ENS) {
    ENS["LOOKUP_ADDRESS"] = "LOOKUP_ADDRESS_ENS";
    ENS["RESOLVE_NAME"] = "RESOLVE_ENS_NAME";
})(ENS || (ENS = {}));
var UD;
(function (UD) {
    UD["RESOLVE_NAME"] = "RESOLVE_UD_NAME";
})(UD || (UD = {}));
var TRANSACTION;
(function (TRANSACTION) {
    TRANSACTION["ADD_NEW_SEND_TRANSACTION"] = "ADD_NEW_SEND_TRANSACTION";
    TRANSACTION["UPDATE_SEND_TRANSACTION_GAS"] = "UPDATE_SEND_TRANSACTION_GAS";
    TRANSACTION["APPROVE_SEND_TRANSACTION"] = "APPROVE_SEND_TRANSACTION";
    TRANSACTION["GET_SEND_TRANSACTION_RESULT"] = "GET_SEND_TRANSACTION_RESULT";
    TRANSACTION["CALCULATE_SEND_TRANSACTION_GAS_LIMIT"] = "CALCULATE_SEND_TRANSACTION_GAS_LIMIT";
    TRANSACTION["CALCULATE_APPROVE_TRANSACTION_GAS_LIMIT"] = "CALCULATE_APPROVE_TRANSACTION_GAS_LIMIT";
    TRANSACTION["CONFIRM"] = "CONFIRM_TRANSACTION";
    TRANSACTION["REJECT"] = "REJECT_TRANSACTION";
    TRANSACTION["GET_LATEST_GAS_PRICE"] = "GET_LATEST_GAS_PRICE";
    TRANSACTION["FETCH_LATEST_GAS_PRICE"] = "FETCH_LATEST_GAS_PRICE";
    TRANSACTION["SEND_ETHER"] = "SEND_ETHER";
    TRANSACTION["CANCEL_TRANSACTION"] = "CANCEL_TRANSACTION";
    TRANSACTION["SPEED_UP_TRANSACTION"] = "SPEED_UP_TRANSACTION";
    TRANSACTION["GET_SPEED_UP_GAS_PRICE"] = "GET_SPEED_UP_GAS_PRICE";
    TRANSACTION["GET_CANCEL_GAS_PRICE"] = "GET_CANCEL_GAS_PRICE";
    TRANSACTION["GET_NEXT_NONCE"] = "GET_NEXT_NONCE";
    TRANSACTION["REJECT_REPLACEMENT_TRANSACTION"] = "REJECT_REPLACEMENT_TRANSACTION";
})(TRANSACTION || (TRANSACTION = {}));
var WALLET;
(function (WALLET) {
    WALLET["CREATE"] = "CREATE_WALLET";
    WALLET["IMPORT"] = "IMPORT_WALLET";
    WALLET["VERIFY_SEED_PHRASE"] = "VERIFY_SEED_PHRASE";
    WALLET["REQUEST_SEED_PHRASE"] = "REQUEST_SEED_PHRASE";
    WALLET["SETUP_COMPLETE"] = "SETUP_COMPLETE";
    WALLET["RESET"] = "RESET";
    WALLET["DISMISS_WELCOME_MESSAGE"] = "DISMISS_WELCOME_MESSAGE";
    WALLET["DISMISS_DEFAULT_WALLET_PREFERENCES"] = "DISMISS_DEFAULT_WALLET_PREFERENCES";
    WALLET["DISMISS_RELEASE_NOTES"] = "DISMISS_RELEASE_NOTES";
    WALLET["TOGGLE_RELEASE_NOTES_SUBSCRIPTION"] = "TOGGLE_RELEASE_NOTES_SUBSCRIPTION";
    WALLET["GENERATE_ON_DEMAND_RELEASE_NOTES"] = "GENERATE_ON_DEMAND_RELEASE_NOTES";
    WALLET["UPDATE_ANTI_PHISHING_IMAGE"] = "UPDATE_ANTI_PHISHING_IMAGE";
    WALLET["TOGGLE_ANTI_PHISHING_PROTECTION"] = "TOGGLE_ANTI_PHISHING_PROTECTION";
    WALLET["TOGGLE_DEFAULT_BROWSER_WALLET"] = "TOGGLE_DEFAULT_BROWSER_WALLET";
    WALLET["SET_NATIVE_CURRENCY"] = "SET_NATIVE_CURRENCY";
    WALLET["GET_VALID_CURRENCIES"] = "GET_VALID_CURRENCIES";
    WALLET["HARDWARE_CONNECT"] = "HARDWARE_CONNECT";
    WALLET["HARDWARE_REMOVE"] = "HARDWARE_REMOVE";
    WALLET["HARDWARE_GET_ACCOUNTS"] = "HARDWARE_GET_ACCOUNTS";
    WALLET["HARDWARE_IMPORT_ACCOUNTS"] = "HARDWARE_IMPORT_ACCOUNTS";
    WALLET["HARDWARE_GET_HD_PATH"] = "HARDWARE_GET_HD_PATH";
    WALLET["HARDWARE_SET_HD_PATH"] = "HARDWARE_SET_HD_PATH";
    WALLET["HARDWARE_IS_LINKED"] = "HARDWARE_IS_LINKED";
    WALLET["SET_DEFAULT_GAS"] = "SET_DEFAULT_GAS";
})(WALLET || (WALLET = {}));
var TOKEN;
(function (TOKEN) {
    TOKEN["GET_BALANCE"] = "GET_TOKEN_BALANCE";
    TOKEN["GET_TOKENS"] = "GET_TOKENS";
    TOKEN["GET_USER_TOKENS"] = "GET_USER_TOKENS";
    TOKEN["GET_TOKEN"] = "GET_TOKEN";
    TOKEN["ADD_CUSTOM_TOKEN"] = "ADD_CUSTOM_TOKEN";
    TOKEN["DELETE_CUSTOM_TOKEN"] = "DELETE_CUSTOM_TOKEN";
    TOKEN["ADD_CUSTOM_TOKENS"] = "ADD_CUSTOM_TOKENS";
    TOKEN["SEND_TOKEN"] = "SEND_TOKEN";
    TOKEN["POPULATE_TOKEN_DATA"] = "POPULATE_TOKEN_DATA";
    TOKEN["SEARCH_TOKEN"] = "SEARCH_TOKEN";
})(TOKEN || (TOKEN = {}));
var ADDRESS_BOOK;
(function (ADDRESS_BOOK) {
    ADDRESS_BOOK["CLEAR"] = "CLEAR";
    ADDRESS_BOOK["DELETE"] = "DELETE";
    ADDRESS_BOOK["SET"] = "SET";
    ADDRESS_BOOK["GET"] = "GET";
    ADDRESS_BOOK["GET_BY_ADDRESS"] = "GET_BY_ADDRESS";
    ADDRESS_BOOK["GET_RECENT_ADDRESSES"] = "GET_RECENT_ADDRESSES";
})(ADDRESS_BOOK || (ADDRESS_BOOK = {}));
var BROWSER;
(function (BROWSER) {
    BROWSER["GET_WINDOW_ID"] = "GET_WINDOW_ID";
})(BROWSER || (BROWSER = {}));
var FILTERS;
(function (FILTERS) {
    FILTERS["SET_ACCOUNT_FILTERS"] = "SET_ACCOUNT_FILTERS";
})(FILTERS || (FILTERS = {}));
const Messages = {
    ACCOUNT,
    APP,
    BACKGROUND,
    CONTENT,
    DAPP,
    EXCHANGE,
    EXTERNAL,
    NETWORK,
    PASSWORD,
    PERMISSION,
    STATE,
    ENS,
    UD,
    TRANSACTION,
    WALLET,
    TOKEN,
    ADDRESS_BOOK,
    BROWSER,
    FILTERS,
    BRIDGE,
};
var Origin;
(function (Origin) {
    Origin["BACKGROUND"] = "BLANK_BACKGROUND";
    Origin["EXTENSION"] = "BLANK_EXTENSION";
    Origin["PROVIDER"] = "BLANK_PROVIDER";
    Origin["TREZOR_CONNECT"] = "trezor-connect";
})(Origin || (Origin = {}));
var BackgroundActions;
(function (BackgroundActions) {
    BackgroundActions["CLOSE_WINDOW"] = "CLOSE_WINDOW";
})(BackgroundActions || (BackgroundActions = {}));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**************************************************************!*\
  !*** ./src/infrastructure/hardware/trezor/trezor-content.ts ***!
  \**************************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_types_communication__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/types/communication */ "./src/utils/types/communication.ts");

// Setup port connection
let port = chrome.runtime.connect({
    name: _utils_types_communication__WEBPACK_IMPORTED_MODULE_0__.Origin.TREZOR_CONNECT,
});
// Process any messages from the extension to the trezor page
port.onMessage.addListener((message) => {
    window.postMessage(message, window.location.origin);
});
// Remove reference to port instance on disconnect
port.onDisconnect.addListener(() => {
    port = null;
});
// Send messages from the trezor page back to the extension
window.addEventListener('message', (ev) => {
    if (port && ev.source === window && ev.data) {
        port.postMessage({ data: ev.data });
    }
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,