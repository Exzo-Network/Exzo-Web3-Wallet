/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/async-mutex/lib/Mutex.js":
/*!***********************************************!*\
  !*** ./node_modules/async-mutex/lib/Mutex.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var Semaphore_1 = __webpack_require__(/*! ./Semaphore */ "./node_modules/async-mutex/lib/Semaphore.js");
var Mutex = /** @class */ (function () {
    function Mutex(cancelError) {
        this._semaphore = new Semaphore_1.default(1, cancelError);
    }
    Mutex.prototype.acquire = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, releaser;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._semaphore.acquire()];
                    case 1:
                        _a = _b.sent(), releaser = _a[1];
                        return [2 /*return*/, releaser];
                }
            });
        });
    };
    Mutex.prototype.runExclusive = function (callback) {
        return this._semaphore.runExclusive(function () { return callback(); });
    };
    Mutex.prototype.isLocked = function () {
        return this._semaphore.isLocked();
    };
    Mutex.prototype.waitForUnlock = function () {
        return this._semaphore.waitForUnlock();
    };
    Mutex.prototype.release = function () {
        if (this._semaphore.isLocked())
            this._semaphore.release();
    };
    Mutex.prototype.cancel = function () {
        return this._semaphore.cancel();
    };
    return Mutex;
}());
exports["default"] = Mutex;


/***/ }),

/***/ "./node_modules/async-mutex/lib/Semaphore.js":
/*!***************************************************!*\
  !*** ./node_modules/async-mutex/lib/Semaphore.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var errors_1 = __webpack_require__(/*! ./errors */ "./node_modules/async-mutex/lib/errors.js");
var Semaphore = /** @class */ (function () {
    function Semaphore(_value, _cancelError) {
        if (_cancelError === void 0) { _cancelError = errors_1.E_CANCELED; }
        this._value = _value;
        this._cancelError = _cancelError;
        this._weightedQueues = [];
        this._weightedWaiters = [];
    }
    Semaphore.prototype.acquire = function (weight) {
        var _this = this;
        if (weight === void 0) { weight = 1; }
        if (weight <= 0)
            throw new Error("invalid weight ".concat(weight, ": must be positive"));
        return new Promise(function (resolve, reject) {
            if (!_this._weightedQueues[weight - 1])
                _this._weightedQueues[weight - 1] = [];
            _this._weightedQueues[weight - 1].push({ resolve: resolve, reject: reject });
            _this._dispatch();
        });
    };
    Semaphore.prototype.runExclusive = function (callback, weight) {
        if (weight === void 0) { weight = 1; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, value, release;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.acquire(weight)];
                    case 1:
                        _a = _b.sent(), value = _a[0], release = _a[1];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, , 4, 5]);
                        return [4 /*yield*/, callback(value)];
                    case 3: return [2 /*return*/, _b.sent()];
                    case 4:
                        release();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Semaphore.prototype.waitForUnlock = function (weight) {
        var _this = this;
        if (weight === void 0) { weight = 1; }
        if (weight <= 0)
            throw new Error("invalid weight ".concat(weight, ": must be positive"));
        return new Promise(function (resolve) {
            if (!_this._weightedWaiters[weight - 1])
                _this._weightedWaiters[weight - 1] = [];
            _this._weightedWaiters[weight - 1].push(resolve);
            _this._dispatch();
        });
    };
    Semaphore.prototype.isLocked = function () {
        return this._value <= 0;
    };
    Semaphore.prototype.getValue = function () {
        return this._value;
    };
    Semaphore.prototype.setValue = function (value) {
        this._value = value;
        this._dispatch();
    };
    Semaphore.prototype.release = function (weight) {
        if (weight === void 0) { weight = 1; }
        if (weight <= 0)
            throw new Error("invalid weight ".concat(weight, ": must be positive"));
        this._value += weight;
        this._dispatch();
    };
    Semaphore.prototype.cancel = function () {
        var _this = this;
        this._weightedQueues.forEach(function (queue) { return queue.forEach(function (entry) { return entry.reject(_this._cancelError); }); });
        this._weightedQueues = [];
    };
    Semaphore.prototype._dispatch = function () {
        var _a;
        for (var weight = this._value; weight > 0; weight--) {
            var queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();
            if (!queueEntry)
                continue;
            var previousValue = this._value;
            var previousWeight = weight;
            this._value -= weight;
            weight = this._value + 1;
            queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);
        }
        this._drainUnlockWaiters();
    };
    Semaphore.prototype._newReleaser = function (weight) {
        var _this = this;
        var called = false;
        return function () {
            if (called)
                return;
            called = true;
            _this.release(weight);
        };
    };
    Semaphore.prototype._drainUnlockWaiters = function () {
        for (var weight = this._value; weight > 0; weight--) {
            if (!this._weightedWaiters[weight - 1])
                continue;
            this._weightedWaiters[weight - 1].forEach(function (waiter) { return waiter(); });
            this._weightedWaiters[weight - 1] = [];
        }
    };
    return Semaphore;
}());
exports["default"] = Semaphore;


/***/ }),

/***/ "./node_modules/async-mutex/lib/errors.js":
/*!************************************************!*\
  !*** ./node_modules/async-mutex/lib/errors.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.E_CANCELED = exports.E_ALREADY_LOCKED = exports.E_TIMEOUT = void 0;
exports.E_TIMEOUT = new Error('timeout while waiting for mutex to become available');
exports.E_ALREADY_LOCKED = new Error('mutex already locked');
exports.E_CANCELED = new Error('request for lock canceled');


/***/ }),

/***/ "./node_modules/async-mutex/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/async-mutex/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tryAcquire = exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var Mutex_1 = __webpack_require__(/*! ./Mutex */ "./node_modules/async-mutex/lib/Mutex.js");
Object.defineProperty(exports, "Mutex", ({ enumerable: true, get: function () { return Mutex_1.default; } }));
var Semaphore_1 = __webpack_require__(/*! ./Semaphore */ "./node_modules/async-mutex/lib/Semaphore.js");
Object.defineProperty(exports, "Semaphore", ({ enumerable: true, get: function () { return Semaphore_1.default; } }));
var withTimeout_1 = __webpack_require__(/*! ./withTimeout */ "./node_modules/async-mutex/lib/withTimeout.js");
Object.defineProperty(exports, "withTimeout", ({ enumerable: true, get: function () { return withTimeout_1.withTimeout; } }));
var tryAcquire_1 = __webpack_require__(/*! ./tryAcquire */ "./node_modules/async-mutex/lib/tryAcquire.js");
Object.defineProperty(exports, "tryAcquire", ({ enumerable: true, get: function () { return tryAcquire_1.tryAcquire; } }));
tslib_1.__exportStar(__webpack_require__(/*! ./errors */ "./node_modules/async-mutex/lib/errors.js"), exports);


/***/ }),

/***/ "./node_modules/async-mutex/lib/tryAcquire.js":
/*!****************************************************!*\
  !*** ./node_modules/async-mutex/lib/tryAcquire.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tryAcquire = void 0;
var errors_1 = __webpack_require__(/*! ./errors */ "./node_modules/async-mutex/lib/errors.js");
var withTimeout_1 = __webpack_require__(/*! ./withTimeout */ "./node_modules/async-mutex/lib/withTimeout.js");
// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types
function tryAcquire(sync, alreadyAcquiredError) {
    if (alreadyAcquiredError === void 0) { alreadyAcquiredError = errors_1.E_ALREADY_LOCKED; }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return (0, withTimeout_1.withTimeout)(sync, 0, alreadyAcquiredError);
}
exports.tryAcquire = tryAcquire;


/***/ }),

/***/ "./node_modules/async-mutex/lib/withTimeout.js":
/*!*****************************************************!*\
  !*** ./node_modules/async-mutex/lib/withTimeout.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withTimeout = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* eslint-disable @typescript-eslint/no-explicit-any */
var errors_1 = __webpack_require__(/*! ./errors */ "./node_modules/async-mutex/lib/errors.js");
function withTimeout(sync, timeout, timeoutError) {
    var _this = this;
    if (timeoutError === void 0) { timeoutError = errors_1.E_TIMEOUT; }
    return {
        acquire: function (weight) {
            if (weight !== undefined && weight <= 0) {
                throw new Error("invalid weight ".concat(weight, ": must be positive"));
            }
            return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var isTimeout, handle, ticket, release, e_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            isTimeout = false;
                            handle = setTimeout(function () {
                                isTimeout = true;
                                reject(timeoutError);
                            }, timeout);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, sync.acquire(weight)];
                        case 2:
                            ticket = _a.sent();
                            if (isTimeout) {
                                release = Array.isArray(ticket) ? ticket[1] : ticket;
                                release();
                            }
                            else {
                                clearTimeout(handle);
                                resolve(ticket);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            if (!isTimeout) {
                                clearTimeout(handle);
                                reject(e_1);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
        },
        runExclusive: function (callback, weight) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var release, ticket;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            release = function () { return undefined; };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, , 7, 8]);
                            return [4 /*yield*/, this.acquire(weight)];
                        case 2:
                            ticket = _a.sent();
                            if (!Array.isArray(ticket)) return [3 /*break*/, 4];
                            release = ticket[1];
                            return [4 /*yield*/, callback(ticket[0])];
                        case 3: return [2 /*return*/, _a.sent()];
                        case 4:
                            release = ticket;
                            return [4 /*yield*/, callback()];
                        case 5: return [2 /*return*/, _a.sent()];
                        case 6: return [3 /*break*/, 8];
                        case 7:
                            release();
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        },
        release: function (weight) {
            sync.release(weight);
        },
        cancel: function () {
            return sync.cancel();
        },
        waitForUnlock: function (weight) {
            if (weight !== undefined && weight <= 0) {
                throw new Error("invalid weight ".concat(weight, ": must be positive"));
            }
            return new Promise(function (resolve, reject) {
                sync.waitForUnlock(weight).then(resolve);
                setTimeout(function () { return reject(timeoutError); }, timeout);
            });
        },
        isLocked: function () { return sync.isLocked(); },
        getValue: function () { return sync.getValue(); },
        setValue: function (value) { return sync.setValue(value); },
    };
}
exports.withTimeout = withTimeout;


/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                // In old IE, native console methods themselves don't have apply().
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      defaultLevel = defaultLevel == null ? "WARN" : defaultLevel;

      var storageKey = "loglevel";
      if (typeof name === "string") {
        storageKey += ":" + name;
      } else if (typeof name === "symbol") {
        storageKey = undefined;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType || !storageKey) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType || !storageKey) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      function clearPersistedLevel() {
          if (typeof window === undefinedType || !storageKey) return;

          // Use localStorage if available
          try {
              window.localStorage.removeItem(storageKey);
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {}
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          defaultLevel = level;
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.resetLevel = function () {
          self.setLevel(defaultLevel, false);
          clearPersistedLevel();
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if ((typeof name !== "symbol" && typeof name !== "string") || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    // ES6 default export, for compatibility
    defaultLogger['default'] = defaultLogger;

    return defaultLogger;
}));


/***/ }),

/***/ "../background/src/utils/manifest.ts":
/*!*******************************************!*\
  !*** ../background/src/utils/manifest.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isManifestV3 = void 0;
const isManifestV3 = () => {
    if (!chrome || !chrome.runtime || !chrome.runtime.getManifest()) {
        return false;
    }
    else {
        return chrome.runtime.getManifest().manifest_version === 3;
    }
};
exports.isManifestV3 = isManifestV3;


/***/ }),

/***/ "../background/src/utils/types/communication.ts":
/*!******************************************************!*\
  !*** ../background/src/utils/types/communication.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BackgroundActions = exports.Origin = exports.Messages = exports.CONTENT = exports.EXTERNAL = void 0;
var ACCOUNT;
(function (ACCOUNT) {
    ACCOUNT["CREATE"] = "CREATE_ACCOUNT";
    ACCOUNT["EXPORT_JSON"] = "EXPORT_ACCOUNT_JSON";
    ACCOUNT["EXPORT_PRIVATE_KEY"] = "EXPORT_ACCOUNT_PK";
    ACCOUNT["IMPORT_JSON"] = "IMPORT_ACCOUNT_JSON";
    ACCOUNT["IMPORT_PRIVATE_KEY"] = "IMPORT_ACCOUNT_PK";
    ACCOUNT["REMOVE"] = "REMOVE_ACCOUNT";
    ACCOUNT["RESET"] = "RESET_ACCOUNT";
    ACCOUNT["RENAME"] = "RENAME_ACCOUNT";
    ACCOUNT["SELECT"] = "SELECT_ACCOUNT";
    ACCOUNT["GET_BALANCE"] = "GET_ACCOUNT_BALANCE";
    ACCOUNT["HIDE"] = "HIDE_ACCOUNT";
    ACCOUNT["UNHIDE"] = "UNHIDE_ACCOUNT";
    ACCOUNT["GET_NATIVE_TOKEN_BALANCE"] = "GET_NATIVE_TOKEN_BALANCE";
})(ACCOUNT || (ACCOUNT = {}));
var APP;
(function (APP) {
    APP["LOCK"] = "LOCK_APP";
    APP["UNLOCK"] = "UNLOCK_APP";
    APP["GET_IDLE_TIMEOUT"] = "GET_IDLE_TIMEOUT";
    APP["SET_IDLE_TIMEOUT"] = "SET_IDLE_TIMEOUT";
    APP["SET_LAST_USER_ACTIVE_TIME"] = "SET_LAST_USER_ACTIVE_TIME";
    APP["RETURN_TO_ONBOARDING"] = "RETURN_TO_ONBOARDING";
    APP["OPEN_RESET"] = "OPEN_RESET";
    APP["OPEN_HW_CONNECT"] = "OPEN_HW_CONNECT";
    APP["OPEN_HW_REMOVE"] = "OPEN_HW_REMOVE";
    APP["OPEN_HW_RECONNECT"] = "OPEN_HW_RECONNECT";
    APP["SET_USER_SETTINGS"] = "SET_USER_SETTINGS";
    APP["UPDATE_POPUP_TAB"] = "UPDATE_POPUP_TAB";
    APP["REJECT_UNCONFIRMED_REQUESTS"] = "REJECT_UNCONFIRMED_REQUESTS";
    APP["SET_USER_ONLINE"] = "SET_USER_ONLINE";
})(APP || (APP = {}));
var BACKGROUND;
(function (BACKGROUND) {
    BACKGROUND["ACTION"] = "ACTION";
})(BACKGROUND || (BACKGROUND = {}));
var DAPP;
(function (DAPP) {
    DAPP["CONFIRM_REQUEST"] = "CONFIRM_DAPP_REQUEST";
    DAPP["ATTEMPT_REJECT_REQUEST"] = "ATTEMPT_REJECT_DAPP_REQUEST";
})(DAPP || (DAPP = {}));
var EXCHANGE;
(function (EXCHANGE) {
    EXCHANGE["CHECK_ALLOWANCE"] = "CHECK_ALLOWANCE";
    EXCHANGE["APPROVE"] = "APPROVE_EXCHANGE";
    EXCHANGE["GET_QUOTE"] = "GET_EXCHANGE_QUOTE";
    EXCHANGE["GET_EXCHANGE"] = "GET_EXCHANGE";
    EXCHANGE["EXECUTE"] = "EXECUTE_EXCHANGE";
})(EXCHANGE || (EXCHANGE = {}));
var BRIDGE;
(function (BRIDGE) {
    BRIDGE["APPROVE_BRIDGE_ALLOWANCE"] = "APPROVE_BRIDGE_ALLOWANCE";
    BRIDGE["GET_BRIDGE_AVAILABLE_CHAINS"] = "GET_BRIDGE_AVAILABLE_CHAINS";
    BRIDGE["GET_BRIDGE_TOKENS"] = "GET_BRIDGE_TOKENS";
    BRIDGE["GET_BRIDGE_QUOTE"] = "GET_BRIDGE_QUOTE";
    BRIDGE["GET_BRIDGE_ROUTES"] = "GET_BRIDGE_ROUTES";
    BRIDGE["EXECUTE_BRIDGE"] = "EXECUTE_BRIDGE";
})(BRIDGE || (BRIDGE = {}));
var EXTERNAL;
(function (EXTERNAL) {
    EXTERNAL["EVENT_SUBSCRIPTION"] = "EVENT_SUBSCRIPTION";
    EXTERNAL["REQUEST"] = "EXTERNAL_REQUEST";
    EXTERNAL["SETUP_PROVIDER"] = "SETUP_PROVIDER";
    EXTERNAL["SW_REINIT"] = "SW_REINIT";
    EXTERNAL["SET_ICON"] = "SET_ICON";
    EXTERNAL["GET_PROVIDER_CONFIG"] = "GET_PROVIDER_CONFIG";
})(EXTERNAL = exports.EXTERNAL || (exports.EXTERNAL = {}));
var CONTENT;
(function (CONTENT) {
    CONTENT["SHOULD_INJECT"] = "SHOULD_INJECT";
    CONTENT["SW_KEEP_ALIVE"] = "SW_KEEP_ALIVE";
})(CONTENT = exports.CONTENT || (exports.CONTENT = {}));
var NETWORK;
(function (NETWORK) {
    NETWORK["CHANGE"] = "NETWORK_CHANGE";
    NETWORK["SET_SHOW_TEST_NETWORKS"] = "SHOW_TEST_NETWORKS";
    NETWORK["ADD_NETWORK"] = "ADD_NETWORK";
    NETWORK["EDIT_NETWORK"] = "EDIT_NETWORK";
    NETWORK["EDIT_NETWORKS_ORDER"] = "EDIT_NETWORKS_ORDER";
    NETWORK["REMOVE_NETWORK"] = "REMOVE_NETWORK";
    NETWORK["GET_SPECIFIC_CHAIN_DETAILS"] = "GET_SPECIFIC_CHAIN_DETAILS";
    NETWORK["GET_RPC_CHAIN_ID"] = "GET_RPC_CHAIN_ID";
    NETWORK["SEARCH_CHAINS"] = "SEARCH_CHAINS";
})(NETWORK || (NETWORK = {}));
var PASSWORD;
(function (PASSWORD) {
    PASSWORD["VERIFY"] = "VERIFY_PASSWORD";
    PASSWORD["CHANGE"] = "CHANGE_PASSWORD";
})(PASSWORD || (PASSWORD = {}));
var PERMISSION;
(function (PERMISSION) {
    PERMISSION["ADD_NEW"] = "ADD_NEW_SITE_PERMISSIONS";
    PERMISSION["CONFIRM"] = "CONFIRM_PERMISSION_REQUEST";
    PERMISSION["GET_ACCOUNT_PERMISSIONS"] = "GET_ACCOUNT_PERMISSIONS";
    PERMISSION["REMOVE_ACCOUNT_FROM_SITE"] = "REMOVE_ACCOUNT_FROM_SITE";
    PERMISSION["UPDATE_SITE_PERMISSIONS"] = "UPDATE_SITE_PERMISSIONS";
})(PERMISSION || (PERMISSION = {}));
var STATE;
(function (STATE) {
    STATE["GET"] = "GET_STATE";
    STATE["SUBSCRIBE"] = "STATE_SUBSCRIBE";
    STATE["GET_REMOTE_CONFIG"] = "GET_REMOTE_CONFIG";
})(STATE || (STATE = {}));
var ENS;
(function (ENS) {
    ENS["LOOKUP_ADDRESS"] = "LOOKUP_ADDRESS_ENS";
    ENS["RESOLVE_NAME"] = "RESOLVE_ENS_NAME";
})(ENS || (ENS = {}));
var UD;
(function (UD) {
    UD["RESOLVE_NAME"] = "RESOLVE_UD_NAME";
})(UD || (UD = {}));
var TRANSACTION;
(function (TRANSACTION) {
    TRANSACTION["ADD_NEW_SEND_TRANSACTION"] = "ADD_NEW_SEND_TRANSACTION";
    TRANSACTION["UPDATE_SEND_TRANSACTION_GAS"] = "UPDATE_SEND_TRANSACTION_GAS";
    TRANSACTION["APPROVE_SEND_TRANSACTION"] = "APPROVE_SEND_TRANSACTION";
    TRANSACTION["GET_SEND_TRANSACTION_RESULT"] = "GET_SEND_TRANSACTION_RESULT";
    TRANSACTION["CALCULATE_SEND_TRANSACTION_GAS_LIMIT"] = "CALCULATE_SEND_TRANSACTION_GAS_LIMIT";
    TRANSACTION["CALCULATE_APPROVE_TRANSACTION_GAS_LIMIT"] = "CALCULATE_APPROVE_TRANSACTION_GAS_LIMIT";
    TRANSACTION["CONFIRM"] = "CONFIRM_TRANSACTION";
    TRANSACTION["REJECT"] = "REJECT_TRANSACTION";
    TRANSACTION["GET_LATEST_GAS_PRICE"] = "GET_LATEST_GAS_PRICE";
    TRANSACTION["FETCH_LATEST_GAS_PRICE"] = "FETCH_LATEST_GAS_PRICE";
    TRANSACTION["SEND_ETHER"] = "SEND_ETHER";
    TRANSACTION["CANCEL_TRANSACTION"] = "CANCEL_TRANSACTION";
    TRANSACTION["SPEED_UP_TRANSACTION"] = "SPEED_UP_TRANSACTION";
    TRANSACTION["GET_SPEED_UP_GAS_PRICE"] = "GET_SPEED_UP_GAS_PRICE";
    TRANSACTION["GET_CANCEL_GAS_PRICE"] = "GET_CANCEL_GAS_PRICE";
    TRANSACTION["GET_NEXT_NONCE"] = "GET_NEXT_NONCE";
    TRANSACTION["REJECT_REPLACEMENT_TRANSACTION"] = "REJECT_REPLACEMENT_TRANSACTION";
})(TRANSACTION || (TRANSACTION = {}));
var WALLET;
(function (WALLET) {
    WALLET["CREATE"] = "CREATE_WALLET";
    WALLET["IMPORT"] = "IMPORT_WALLET";
    WALLET["VERIFY_SEED_PHRASE"] = "VERIFY_SEED_PHRASE";
    WALLET["REQUEST_SEED_PHRASE"] = "REQUEST_SEED_PHRASE";
    WALLET["SETUP_COMPLETE"] = "SETUP_COMPLETE";
    WALLET["RESET"] = "RESET";
    WALLET["DISMISS_WELCOME_MESSAGE"] = "DISMISS_WELCOME_MESSAGE";
    WALLET["DISMISS_DEFAULT_WALLET_PREFERENCES"] = "DISMISS_DEFAULT_WALLET_PREFERENCES";
    WALLET["DISMISS_RELEASE_NOTES"] = "DISMISS_RELEASE_NOTES";
    WALLET["TOGGLE_RELEASE_NOTES_SUBSCRIPTION"] = "TOGGLE_RELEASE_NOTES_SUBSCRIPTION";
    WALLET["GENERATE_ON_DEMAND_RELEASE_NOTES"] = "GENERATE_ON_DEMAND_RELEASE_NOTES";
    WALLET["UPDATE_ANTI_PHISHING_IMAGE"] = "UPDATE_ANTI_PHISHING_IMAGE";
    WALLET["TOGGLE_ANTI_PHISHING_PROTECTION"] = "TOGGLE_ANTI_PHISHING_PROTECTION";
    WALLET["TOGGLE_DEFAULT_BROWSER_WALLET"] = "TOGGLE_DEFAULT_BROWSER_WALLET";
    WALLET["SET_NATIVE_CURRENCY"] = "SET_NATIVE_CURRENCY";
    WALLET["GET_VALID_CURRENCIES"] = "GET_VALID_CURRENCIES";
    WALLET["HARDWARE_CONNECT"] = "HARDWARE_CONNECT";
    WALLET["HARDWARE_REMOVE"] = "HARDWARE_REMOVE";
    WALLET["HARDWARE_GET_ACCOUNTS"] = "HARDWARE_GET_ACCOUNTS";
    WALLET["HARDWARE_IMPORT_ACCOUNTS"] = "HARDWARE_IMPORT_ACCOUNTS";
    WALLET["HARDWARE_GET_HD_PATH"] = "HARDWARE_GET_HD_PATH";
    WALLET["HARDWARE_SET_HD_PATH"] = "HARDWARE_SET_HD_PATH";
    WALLET["HARDWARE_IS_LINKED"] = "HARDWARE_IS_LINKED";
    WALLET["SET_DEFAULT_GAS"] = "SET_DEFAULT_GAS";
})(WALLET || (WALLET = {}));
var TOKEN;
(function (TOKEN) {
    TOKEN["GET_BALANCE"] = "GET_TOKEN_BALANCE";
    TOKEN["GET_TOKENS"] = "GET_TOKENS";
    TOKEN["GET_USER_TOKENS"] = "GET_USER_TOKENS";
    TOKEN["GET_TOKEN"] = "GET_TOKEN";
    TOKEN["ADD_CUSTOM_TOKEN"] = "ADD_CUSTOM_TOKEN";
    TOKEN["DELETE_CUSTOM_TOKEN"] = "DELETE_CUSTOM_TOKEN";
    TOKEN["ADD_CUSTOM_TOKENS"] = "ADD_CUSTOM_TOKENS";
    TOKEN["SEND_TOKEN"] = "SEND_TOKEN";
    TOKEN["POPULATE_TOKEN_DATA"] = "POPULATE_TOKEN_DATA";
    TOKEN["SEARCH_TOKEN"] = "SEARCH_TOKEN";
})(TOKEN || (TOKEN = {}));
var ADDRESS_BOOK;
(function (ADDRESS_BOOK) {
    ADDRESS_BOOK["CLEAR"] = "CLEAR";
    ADDRESS_BOOK["DELETE"] = "DELETE";
    ADDRESS_BOOK["SET"] = "SET";
    ADDRESS_BOOK["GET"] = "GET";
    ADDRESS_BOOK["GET_BY_ADDRESS"] = "GET_BY_ADDRESS";
    ADDRESS_BOOK["GET_RECENT_ADDRESSES"] = "GET_RECENT_ADDRESSES";
})(ADDRESS_BOOK || (ADDRESS_BOOK = {}));
var BROWSER;
(function (BROWSER) {
    BROWSER["GET_WINDOW_ID"] = "GET_WINDOW_ID";
})(BROWSER || (BROWSER = {}));
var FILTERS;
(function (FILTERS) {
    FILTERS["SET_ACCOUNT_FILTERS"] = "SET_ACCOUNT_FILTERS";
})(FILTERS || (FILTERS = {}));
exports.Messages = {
    ACCOUNT,
    APP,
    BACKGROUND,
    CONTENT,
    DAPP,
    EXCHANGE,
    EXTERNAL,
    NETWORK,
    PASSWORD,
    PERMISSION,
    STATE,
    ENS,
    UD,
    TRANSACTION,
    WALLET,
    TOKEN,
    ADDRESS_BOOK,
    BROWSER,
    FILTERS,
    BRIDGE,
};
var Origin;
(function (Origin) {
    Origin["BACKGROUND"] = "BLANK_BACKGROUND";
    Origin["EXTENSION"] = "BLANK_EXTENSION";
    Origin["PROVIDER"] = "BLANK_PROVIDER";
    Origin["TREZOR_CONNECT"] = "trezor-connect";
})(Origin = exports.Origin || (exports.Origin = {}));
var BackgroundActions;
(function (BackgroundActions) {
    BackgroundActions["CLOSE_WINDOW"] = "CLOSE_WINDOW";
})(BackgroundActions = exports.BackgroundActions || (exports.BackgroundActions = {}));


/***/ }),

/***/ "./src/content.ts":
/*!************************!*\
  !*** ./src/content.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const communication_1 = __webpack_require__(/*! @block-wallet/background/utils/types/communication */ "../background/src/utils/types/communication.ts");
const async_mutex_1 = __webpack_require__(/*! async-mutex */ "./node_modules/async-mutex/lib/index.js");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const types_1 = __webpack_require__(/*! ./types */ "./src/types.ts");
const site_1 = __webpack_require__(/*! ./utils/site */ "./src/utils/site.ts");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
//@ts-ignore
const blankProvider_js_raw_1 = __importDefault(__webpack_require__(/*! ../../../dist/blankProvider.js?raw */ "../../dist/blankProvider.js?raw"));
const manifest_1 = __webpack_require__(/*! @block-wallet/background/utils/manifest */ "../background/src/utils/manifest.ts");
let providerOverridden = false;
function injectProvider() {
    const injectableScript = blankProvider_js_raw_1.default;
    const injectableScriptSourceMapURL = `//# sourceURL=${chrome.runtime.getURL('blankProvider.js')}\n`;
    const BUNDLE = injectableScript + injectableScriptSourceMapURL;
    const container = document.head || document.documentElement;
    const script = document.createElement('script');
    script.type = 'text/javascript';
    script.textContent = BUNDLE;
    script.setAttribute('async', 'false');
    container.insertBefore(script, container.children[0]);
    container.removeChild(script);
}
window.addEventListener('ethereum#initialized', (e) => {
    const customEvent = e;
    if (customEvent.detail !== 'isBlockWallet') {
        providerOverridden = true;
    }
    else {
        providerOverridden = false;
    }
});
injectProvider();
const SW_KEEP_ALIVE_INTERVAL = 10;
let SW_ALIVE = false;
let portReinitialized = false;
let intervalRef;
if ((0, manifest_1.isManifestV3)()) {
    intervalRef = setInterval(() => {
        chrome.runtime.sendMessage({ message: communication_1.CONTENT.SW_KEEP_ALIVE }, () => {
            if (chrome.runtime.lastError) {
                loglevel_1.default.info('Error keeping alive:', chrome.runtime.lastError.message || chrome.runtime.lastError);
                const err = chrome.runtime.lastError.message || '';
                SW_ALIVE = !err.includes('Receiving end does not exist');
                portReinitialized = SW_ALIVE;
            }
            else {
                SW_ALIVE = true;
            }
        });
    }, SW_KEEP_ALIVE_INTERVAL);
}
else {
    SW_ALIVE = true;
}
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
let port = undefined;
const initMutex = new async_mutex_1.Mutex();
// Check background settings for script load
chrome.runtime.sendMessage({ message: communication_1.CONTENT.SHOULD_INJECT }, (response) => {
    const error = chrome.runtime.lastError;
    const shouldLoad = (0, site_1.checkScriptLoad)();
    if (port &&
        (response.shouldInject !== true || shouldLoad !== true || error) &&
        //If provider has been overridden by another wallet, then remove connection.
        providerOverridden) {
        if ((0, manifest_1.isManifestV3)() && intervalRef) {
            clearInterval(intervalRef);
        }
        port.disconnect();
        window.removeEventListener('message', windowListener);
        loglevel_1.default.warn('BlockWallet: Provider not injected due to user setting.');
    }
    else if (providerOverridden) {
        injectProvider();
    }
});
// Setup window listener
const windowListener = async ({ data, source, }) => {
    // Only allow messages from our window, by the inject
    if (source !== window ||
        data.origin !== communication_1.Origin.PROVIDER ||
        !Object.values(communication_1.EXTERNAL).includes(data.message)) {
        return;
    }
    // Wrapper to retry failed messages
    const postMessage = async (data) => {
        try {
            if (!SW_ALIVE || !port) {
                // Port was reinitialized, force retry
                throw new Error();
            }
            port.postMessage(data);
        }
        catch (error) {
            // If this fails due to SW being inactive, retry
            await sleep(30);
            loglevel_1.default.debug('waiting for SW to startup...');
            return postMessage(data);
        }
    };
    return postMessage(data);
};
window.addEventListener('message', (message) => {
    windowListener(message);
});
// Init function
const init = () => {
    // Setup port connection
    port = chrome.runtime.connect({ name: communication_1.Origin.PROVIDER });
    // Set callback to send any messages from the extension back to the page
    port.onMessage.addListener((message) => {
        window.postMessage({ ...message, origin: communication_1.Origin.BACKGROUND }, window.location.href);
    });
    if ((0, manifest_1.isManifestV3)()) {
        port.onDisconnect.addListener(() => {
            initMutex.runExclusive(async () => {
                loglevel_1.default.info('port disconnection');
                SW_ALIVE = false; // If we've reached this point, we can't expect this to be false and wait until this has changed.
                await sleep(200);
                // Port has been disconnected, reinitialize once
                while (SW_ALIVE === false) {
                    loglevel_1.default.debug('waiting for SW to be restarted...');
                    await sleep(100);
                }
                if (!portReinitialized) {
                    loglevel_1.default.info('reinitializing port...');
                    init();
                    // Signal SW_REINIT in case there were active subscriptions
                    window.postMessage({
                        signal: types_1.Signals.SW_REINIT,
                        origin: communication_1.Origin.BACKGROUND,
                    }, window.location.href);
                }
            });
        });
    }
    portReinitialized = true;
};
init();


/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Signals = exports.ProviderEvents = void 0;
// Provider events
var ProviderEvents;
(function (ProviderEvents) {
    ProviderEvents["accountsChanged"] = "accountsChanged";
    ProviderEvents["chainChanged"] = "chainChanged";
    ProviderEvents["connect"] = "connect";
    ProviderEvents["disconnect"] = "disconnect";
    ProviderEvents["message"] = "message";
    /**
     * close
     *
     * @deprecated Deprecated Web3 subscription event
     */
    ProviderEvents["close"] = "close";
    /**
     * notification
     *
     * @deprecated Deprecated Web3 subscription event
     */
    ProviderEvents["notification"] = "notification";
    /**
     * data
     *
     * @deprecated Deprecated Web3 subscription event
     */
    ProviderEvents["data"] = "data";
    /**
     * networkChanged
     *
     * @deprecated Deprecated network change event
     */
    ProviderEvents["networkChanged"] = "networkChanged";
    /**
     * chainIdChanged
     *
     * @deprecated Deprecated network change event
     */
    ProviderEvents["chainIdChanged"] = "chainIdChanged";
})(ProviderEvents = exports.ProviderEvents || (exports.ProviderEvents = {}));
var Signals;
(function (Signals) {
    Signals["SW_REINIT"] = "SW_REINIT";
})(Signals = exports.Signals || (exports.Signals = {}));


/***/ }),

/***/ "./src/utils/site.ts":
/*!***************************!*\
  !*** ./src/utils/site.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIconData = exports.checkScriptLoad = exports.isCompatible = void 0;
/**
 * Check if the site is on the list of incompatibleSites
 */
const isCompatible = (incompatibleSites) => {
    for (let i = 0; i < incompatibleSites.length; i++) {
        if (window.location.hostname === incompatibleSites[i] ||
            window.location.hostname.endsWith('.' + incompatibleSites[i])) {
            return false;
        }
    }
    return true;
};
exports.isCompatible = isCompatible;
/**
 * Check for unallowed file extension
 */
const checkExtension = () => {
    const fileExtensions = [/\.xml$/u, /\.pdf$/u];
    for (let i = 0; i < fileExtensions.length; i++) {
        if (fileExtensions[i].test(window.location.pathname)) {
            return false;
        }
    }
    return true;
};
/**
 * Checks the documentElement of the current document
 */
const documentElementCheck = () => {
    const documentElement = window.document.documentElement.nodeName;
    if (documentElement) {
        return documentElement.toLowerCase() === 'html';
    }
    return true;
};
/**
 * Checks the doctype of the current document if it exists
 */
const checkDocType = () => {
    const { doctype } = window.document;
    if (doctype) {
        return doctype.name === 'html';
    }
    return true;
};
/**
 * Helper function with checks to do before loading the script
 */
const checkScriptLoad = () => {
    return checkDocType() && checkExtension() && documentElementCheck();
};
exports.checkScriptLoad = checkScriptLoad;
/**
 * Returns site favicon data
 */
const getIconData = async () => {
    return new Promise((resolve) => {
        if (document.readyState === 'complete' ||
            document.readyState === 'interactive') {
            resolve(getIconFromDom());
        }
        else {
            const domContentLoadedHandler = async () => {
                resolve(getIconFromDom());
                window.removeEventListener('DOMContentLoaded', domContentLoadedHandler);
            };
            window.addEventListener('DOMContentLoaded', domContentLoadedHandler);
        }
    });
};
exports.getIconData = getIconData;
/**
 * Extracts an icon for the site from the DOM
 *
 * @returns Icon url or null if there isn't a valid one
 */
const getIconFromDom = async () => {
    const { document } = window;
    const icons = document.querySelectorAll('head > link[rel~="icon"]');
    for (const icon of icons) {
        if (icon && (await isValidImage(icon.href))) {
            return icon.href;
        }
    }
    return null;
};
/**
 * Checks if the given image loads correctly
 *
 * @param url Image source
 */
const isValidImage = async (url) => {
    const img = document.createElement('img');
    const isValid = await new Promise((resolve) => {
        try {
            img.onload = () => resolve(true);
            img.onerror = () => resolve(false);
            img.src = url;
        }
        catch (error) {
            resolve(false);
        }
    });
    img.remove();
    return isValid;
};


/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__values": () => (/* binding */ __values),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__classPrivateFieldIn": () => (/* binding */ __classPrivateFieldIn)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}


/***/ }),

/***/ "../../dist/blankProvider.js?raw":
/*!***************************************!*\
  !*** ../../dist/blankProvider.js?raw ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = "/******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./node_modules/@metamask/safe-event-emitter/index.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/@metamask/safe-event-emitter/index.js ***!\n  \\************************************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports[\"default\"] = SafeEventEmitter;\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/eth-rpc-errors/dist/classes.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/eth-rpc-errors/dist/classes.js ***!\n  \\*****************************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\nconst fast_safe_stringify_1 = __webpack_require__(/*! fast-safe-stringify */ \"./node_modules/fast-safe-stringify/index.js\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n    constructor(code, message, data) {\n        if (!Number.isInteger(code)) {\n            throw new Error('\"code\" must be an integer.');\n        }\n        if (!message || typeof message !== 'string') {\n            throw new Error('\"message\" must be a nonempty string.');\n        }\n        super(message);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    /**\n     * Returns a plain object with all public class properties.\n     */\n    serialize() {\n        const serialized = {\n            code: this.code,\n            message: this.message,\n        };\n        if (this.data !== undefined) {\n            serialized.data = this.data;\n        }\n        if (this.stack) {\n            serialized.stack = this.stack;\n        }\n        return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n    toString() {\n        return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n    }\n}\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n    /**\n     * Create an Ethereum Provider JSON-RPC error.\n     * `code` must be an integer in the 1000 <= 4999 range.\n     */\n    constructor(code, message, data) {\n        if (!isValidEthProviderCode(code)) {\n            throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n        }\n        super(code, message, data);\n    }\n}\nexports.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n    return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n    if (value === '[Circular]') {\n        return undefined;\n    }\n    return value;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Nlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGFzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZEQUFnRDtBQVNoRDs7OztHQUlHO0FBQ0gsTUFBYSxnQkFBb0IsU0FBUSxLQUFLO0lBTTVDLFlBQVksSUFBWSxFQUFFLE9BQWUsRUFBRSxJQUFRO1FBRWpELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQ2IsNEJBQTRCLENBQzdCLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0NBQXNDLENBQ3ZDLENBQUM7U0FDSDtRQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVM7UUFDUCxNQUFNLFVBQVUsR0FBK0I7WUFDN0MsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3RCLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQzNCLFVBQVUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUM3QjtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUMvQjtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyw2QkFBYSxDQUNsQixJQUFJLENBQUMsU0FBUyxFQUFFLEVBQ2hCLGlCQUFpQixFQUNqQixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXRERCw0Q0FzREM7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLHFCQUF5QixTQUFRLGdCQUFtQjtJQUUvRDs7O09BR0c7SUFDSCxZQUFZLElBQVksRUFBRSxPQUFlLEVBQUUsSUFBUTtRQUVqRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FDYiwyREFBMkQsQ0FDNUQsQ0FBQztTQUNIO1FBRUQsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBaEJELHNEQWdCQztBQUVELFdBQVc7QUFFWCxTQUFTLHNCQUFzQixDQUFDLElBQVk7SUFDMUMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQztBQUNoRSxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxDQUFVLEVBQUUsS0FBYztJQUNuRCxJQUFJLEtBQUssS0FBSyxZQUFZLEVBQUU7UUFDMUIsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMifQ==\n\n/***/ }),\n\n/***/ \"./node_modules/eth-rpc-errors/dist/error-constants.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/eth-rpc-errors/dist/error-constants.js ***!\n  \\*************************************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.errorValues = exports.errorCodes = void 0;\nexports.errorCodes = {\n    rpc: {\n        invalidInput: -32000,\n        resourceNotFound: -32001,\n        resourceUnavailable: -32002,\n        transactionRejected: -32003,\n        methodNotSupported: -32004,\n        limitExceeded: -32005,\n        parse: -32700,\n        invalidRequest: -32600,\n        methodNotFound: -32601,\n        invalidParams: -32602,\n        internal: -32603,\n    },\n    provider: {\n        userRejectedRequest: 4001,\n        unauthorized: 4100,\n        unsupportedMethod: 4200,\n        disconnected: 4900,\n        chainDisconnected: 4901,\n    },\n};\nexports.errorValues = {\n    '-32700': {\n        standard: 'JSON RPC 2.0',\n        message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n    },\n    '-32600': {\n        standard: 'JSON RPC 2.0',\n        message: 'The JSON sent is not a valid Request object.',\n    },\n    '-32601': {\n        standard: 'JSON RPC 2.0',\n        message: 'The method does not exist / is not available.',\n    },\n    '-32602': {\n        standard: 'JSON RPC 2.0',\n        message: 'Invalid method parameter(s).',\n    },\n    '-32603': {\n        standard: 'JSON RPC 2.0',\n        message: 'Internal JSON-RPC error.',\n    },\n    '-32000': {\n        standard: 'EIP-1474',\n        message: 'Invalid input.',\n    },\n    '-32001': {\n        standard: 'EIP-1474',\n        message: 'Resource not found.',\n    },\n    '-32002': {\n        standard: 'EIP-1474',\n        message: 'Resource unavailable.',\n    },\n    '-32003': {\n        standard: 'EIP-1474',\n        message: 'Transaction rejected.',\n    },\n    '-32004': {\n        standard: 'EIP-1474',\n        message: 'Method not supported.',\n    },\n    '-32005': {\n        standard: 'EIP-1474',\n        message: 'Request limit exceeded.',\n    },\n    '4001': {\n        standard: 'EIP-1193',\n        message: 'User rejected the request.',\n    },\n    '4100': {\n        standard: 'EIP-1193',\n        message: 'The requested account and/or method has not been authorized by the user.',\n    },\n    '4200': {\n        standard: 'EIP-1193',\n        message: 'The requested method is not supported by this Ethereum provider.',\n    },\n    '4900': {\n        standard: 'EIP-1193',\n        message: 'The provider is disconnected from all chains.',\n    },\n    '4901': {\n        standard: 'EIP-1193',\n        message: 'The provider is disconnected from the specified chain.',\n    },\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Vycm9yLWNvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUF1QmEsUUFBQSxVQUFVLEdBQWU7SUFDcEMsR0FBRyxFQUFFO1FBQ0gsWUFBWSxFQUFFLENBQUMsS0FBSztRQUNwQixnQkFBZ0IsRUFBRSxDQUFDLEtBQUs7UUFDeEIsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLO1FBQzNCLG1CQUFtQixFQUFFLENBQUMsS0FBSztRQUMzQixrQkFBa0IsRUFBRSxDQUFDLEtBQUs7UUFDMUIsYUFBYSxFQUFFLENBQUMsS0FBSztRQUNyQixLQUFLLEVBQUUsQ0FBQyxLQUFLO1FBQ2IsY0FBYyxFQUFFLENBQUMsS0FBSztRQUN0QixjQUFjLEVBQUUsQ0FBQyxLQUFLO1FBQ3RCLGFBQWEsRUFBRSxDQUFDLEtBQUs7UUFDckIsUUFBUSxFQUFFLENBQUMsS0FBSztLQUNqQjtJQUNELFFBQVEsRUFBRTtRQUNSLG1CQUFtQixFQUFFLElBQUk7UUFDekIsWUFBWSxFQUFFLElBQUk7UUFDbEIsaUJBQWlCLEVBQUUsSUFBSTtRQUN2QixZQUFZLEVBQUUsSUFBSTtRQUNsQixpQkFBaUIsRUFBRSxJQUFJO0tBQ3hCO0NBQ0YsQ0FBQztBQUVXLFFBQUEsV0FBVyxHQUFHO0lBQ3pCLFFBQVEsRUFBRTtRQUNSLFFBQVEsRUFBRSxjQUFjO1FBQ3hCLE9BQU8sRUFBRSx1R0FBdUc7S0FDakg7SUFDRCxRQUFRLEVBQUU7UUFDUixRQUFRLEVBQUUsY0FBYztRQUN4QixPQUFPLEVBQUUsOENBQThDO0tBQ3hEO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsUUFBUSxFQUFFLGNBQWM7UUFDeEIsT0FBTyxFQUFFLCtDQUErQztLQUN6RDtJQUNELFFBQVEsRUFBRTtRQUNSLFFBQVEsRUFBRSxjQUFjO1FBQ3hCLE9BQU8sRUFBRSw4QkFBOEI7S0FDeEM7SUFDRCxRQUFRLEVBQUU7UUFDUixRQUFRLEVBQUUsY0FBYztRQUN4QixPQUFPLEVBQUUsMEJBQTBCO0tBQ3BDO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsUUFBUSxFQUFFLFVBQVU7UUFDcEIsT0FBTyxFQUFFLGdCQUFnQjtLQUMxQjtJQUNELFFBQVEsRUFBRTtRQUNSLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLE9BQU8sRUFBRSxxQkFBcUI7S0FDL0I7SUFDRCxRQUFRLEVBQUU7UUFDUixRQUFRLEVBQUUsVUFBVTtRQUNwQixPQUFPLEVBQUUsdUJBQXVCO0tBQ2pDO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsUUFBUSxFQUFFLFVBQVU7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtLQUNqQztJQUNELFFBQVEsRUFBRTtRQUNSLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLE9BQU8sRUFBRSx1QkFBdUI7S0FDakM7SUFDRCxRQUFRLEVBQUU7UUFDUixRQUFRLEVBQUUsVUFBVTtRQUNwQixPQUFPLEVBQUUseUJBQXlCO0tBQ25DO0lBQ0QsTUFBTSxFQUFFO1FBQ04sUUFBUSxFQUFFLFVBQVU7UUFDcEIsT0FBTyxFQUFFLDRCQUE0QjtLQUN0QztJQUNELE1BQU0sRUFBRTtRQUNOLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLE9BQU8sRUFBRSwwRUFBMEU7S0FDcEY7SUFDRCxNQUFNLEVBQUU7UUFDTixRQUFRLEVBQUUsVUFBVTtRQUNwQixPQUFPLEVBQUUsa0VBQWtFO0tBQzVFO0lBQ0QsTUFBTSxFQUFFO1FBQ04sUUFBUSxFQUFFLFVBQVU7UUFDcEIsT0FBTyxFQUFFLCtDQUErQztLQUN6RDtJQUNELE1BQU0sRUFBRTtRQUNOLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLE9BQU8sRUFBRSx3REFBd0Q7S0FDbEU7Q0FDRixDQUFDIn0=\n\n/***/ }),\n\n/***/ \"./node_modules/eth-rpc-errors/dist/errors.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/eth-rpc-errors/dist/errors.js ***!\n  \\****************************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ethErrors = void 0;\nconst classes_1 = __webpack_require__(/*! ./classes */ \"./node_modules/eth-rpc-errors/dist/classes.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/eth-rpc-errors/dist/utils.js\");\nconst error_constants_1 = __webpack_require__(/*! ./error-constants */ \"./node_modules/eth-rpc-errors/dist/error-constants.js\");\nexports.ethErrors = {\n    rpc: {\n        /**\n         * Get a JSON RPC 2.0 Parse (-32700) error.\n         */\n        parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n         */\n        invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n         */\n        invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n        /**\n         * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n         */\n        methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n        /**\n         * Get a JSON RPC 2.0 Internal (-32603) error.\n         */\n        internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n        /**\n         * Get a JSON RPC 2.0 Server error.\n         * Permits integer error codes in the [ -32099 <= -32005 ] range.\n         * Codes -32000 through -32004 are reserved by EIP-1474.\n         */\n        server: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum RPC Server errors must provide single object argument.');\n            }\n            const { code } = opts;\n            if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n                throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n            }\n            return getEthJsonRpcError(code, opts);\n        },\n        /**\n         * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n         */\n        invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n         */\n        resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n         */\n        resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n        /**\n         * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n         */\n        transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n        /**\n         * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n         */\n        methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n        /**\n         * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n         */\n        limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg),\n    },\n    provider: {\n        /**\n         * Get an Ethereum Provider User Rejected Request (4001) error.\n         */\n        userRejectedRequest: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unauthorized (4100) error.\n         */\n        unauthorized: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unsupported Method (4200) error.\n         */\n        unsupportedMethod: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n        },\n        /**\n         * Get an Ethereum Provider Not Connected (4900) error.\n         */\n        disconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n        },\n        /**\n         * Get an Ethereum Provider Chain Not Connected (4901) error.\n         */\n        chainDisconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n        },\n        /**\n         * Get a custom Ethereum Provider error.\n         */\n        custom: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum Provider custom errors must provide single object argument.');\n            }\n            const { code, message, data } = opts;\n            if (!message || typeof message !== 'string') {\n                throw new Error('\"message\" must be a nonempty string');\n            }\n            return new classes_1.EthereumProviderError(code, message, data);\n        },\n    },\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n    if (arg) {\n        if (typeof arg === 'string') {\n            return [arg];\n        }\n        else if (typeof arg === 'object' && !Array.isArray(arg)) {\n            const { message, data } = arg;\n            if (message && typeof message !== 'string') {\n                throw new Error('Must specify string message.');\n            }\n            return [message || undefined, data];\n        }\n    }\n    return [];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBb0U7QUFDcEUsbUNBQTZDO0FBQzdDLHVEQUErQztBQWVsQyxRQUFBLFNBQVMsR0FBRztJQUN2QixHQUFHLEVBQUU7UUFFSDs7V0FFRztRQUNILEtBQUssRUFBRSxDQUFJLEdBQXFCLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUNyRCw0QkFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUMxQjtRQUVEOztXQUVHO1FBQ0gsY0FBYyxFQUFFLENBQUksR0FBcUIsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQzlELDRCQUFVLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQ25DO1FBRUQ7O1dBRUc7UUFDSCxhQUFhLEVBQUUsQ0FBSSxHQUFxQixFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FDN0QsNEJBQVUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FDbEM7UUFFRDs7V0FFRztRQUNILGNBQWMsRUFBRSxDQUFJLEdBQXFCLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUM5RCw0QkFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUNuQztRQUVEOztXQUVHO1FBQ0gsUUFBUSxFQUFFLENBQUksR0FBcUIsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQ3hELDRCQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQzdCO1FBRUQ7Ozs7V0FJRztRQUNILE1BQU0sRUFBRSxDQUFJLElBQTJCLEVBQUUsRUFBRTtZQUN6QyxJQUFJLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7YUFDcEY7WUFDRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUU7Z0JBQzdELE1BQU0sSUFBSSxLQUFLLENBQ2IsK0RBQStELENBQ2hFLENBQUM7YUFDSDtZQUNELE9BQU8sa0JBQWtCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFFRDs7V0FFRztRQUNILFlBQVksRUFBRSxDQUFJLEdBQXFCLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUM1RCw0QkFBVSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUNqQztRQUVEOztXQUVHO1FBQ0gsZ0JBQWdCLEVBQUUsQ0FBSSxHQUFxQixFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FDaEUsNEJBQVUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUNyQztRQUVEOztXQUVHO1FBQ0gsbUJBQW1CLEVBQUUsQ0FBSSxHQUFxQixFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FDbkUsNEJBQVUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUN4QztRQUVEOztXQUVHO1FBQ0gsbUJBQW1CLEVBQUUsQ0FBSSxHQUFxQixFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FDbkUsNEJBQVUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUN4QztRQUVEOztXQUVHO1FBQ0gsa0JBQWtCLEVBQUUsQ0FBSSxHQUFxQixFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FDbEUsNEJBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUN2QztRQUVEOztXQUVHO1FBQ0gsYUFBYSxFQUFFLENBQUksR0FBcUIsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQzdELDRCQUFVLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQ2xDO0tBQ0Y7SUFFRCxRQUFRLEVBQUU7UUFFUjs7V0FFRztRQUNILG1CQUFtQixFQUFFLENBQUksR0FBcUIsRUFBRSxFQUFFO1lBQ2hELE9BQU8sbUJBQW1CLENBQ3hCLDRCQUFVLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FDN0MsQ0FBQztRQUNKLENBQUM7UUFFRDs7V0FFRztRQUNILFlBQVksRUFBRSxDQUFJLEdBQXFCLEVBQUUsRUFBRTtZQUN6QyxPQUFPLG1CQUFtQixDQUN4Qiw0QkFBVSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUN0QyxDQUFDO1FBQ0osQ0FBQztRQUVEOztXQUVHO1FBQ0gsaUJBQWlCLEVBQUUsQ0FBSSxHQUFxQixFQUFFLEVBQUU7WUFDOUMsT0FBTyxtQkFBbUIsQ0FDeEIsNEJBQVUsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUMzQyxDQUFDO1FBQ0osQ0FBQztRQUVEOztXQUVHO1FBQ0gsWUFBWSxFQUFFLENBQUksR0FBcUIsRUFBRSxFQUFFO1lBQ3pDLE9BQU8sbUJBQW1CLENBQ3hCLDRCQUFVLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQ3RDLENBQUM7UUFDSixDQUFDO1FBRUQ7O1dBRUc7UUFDSCxpQkFBaUIsRUFBRSxDQUFJLEdBQXFCLEVBQUUsRUFBRTtZQUM5QyxPQUFPLG1CQUFtQixDQUN4Qiw0QkFBVSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQzNDLENBQUM7UUFDSixDQUFDO1FBRUQ7O1dBRUc7UUFDSCxNQUFNLEVBQUUsQ0FBSSxJQUF1QixFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDNUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO2FBQ3pGO1lBRUQsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBRXJDLElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO2dCQUMzQyxNQUFNLElBQUksS0FBSyxDQUNiLHFDQUFxQyxDQUN0QyxDQUFDO2FBQ0g7WUFDRCxPQUFPLElBQUksK0JBQXFCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxDQUFDO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsV0FBVztBQUVYLFNBQVMsa0JBQWtCLENBQUksSUFBWSxFQUFFLEdBQXFCO0lBQ2hFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sSUFBSSwwQkFBZ0IsQ0FDekIsSUFBSSxFQUNKLE9BQU8sSUFBSSwwQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFDbkMsSUFBSSxDQUNMLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBSSxJQUFZLEVBQUUsR0FBcUI7SUFDakUsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsT0FBTyxJQUFJLCtCQUFxQixDQUM5QixJQUFJLEVBQ0osT0FBTyxJQUFJLDBCQUFrQixDQUFDLElBQUksQ0FBQyxFQUNuQyxJQUFJLENBQ0wsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBSSxHQUFxQjtJQUN6QyxJQUFJLEdBQUcsRUFBRTtRQUNQLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNkO2FBQU0sSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3pELE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBRTlCLElBQUksT0FBTyxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtnQkFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO2FBQ2pEO1lBQ0QsT0FBTyxDQUFDLE9BQU8sSUFBSSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDckM7S0FDRjtJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyJ9\n\n/***/ }),\n\n/***/ \"./node_modules/eth-rpc-errors/dist/index.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/eth-rpc-errors/dist/index.js ***!\n  \\***************************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;\nconst classes_1 = __webpack_require__(/*! ./classes */ \"./node_modules/eth-rpc-errors/dist/classes.js\");\nObject.defineProperty(exports, \"EthereumRpcError\", ({ enumerable: true, get: function () { return classes_1.EthereumRpcError; } }));\nObject.defineProperty(exports, \"EthereumProviderError\", ({ enumerable: true, get: function () { return classes_1.EthereumProviderError; } }));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/eth-rpc-errors/dist/utils.js\");\nObject.defineProperty(exports, \"serializeError\", ({ enumerable: true, get: function () { return utils_1.serializeError; } }));\nObject.defineProperty(exports, \"getMessageFromCode\", ({ enumerable: true, get: function () { return utils_1.getMessageFromCode; } }));\nconst errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/eth-rpc-errors/dist/errors.js\");\nObject.defineProperty(exports, \"ethErrors\", ({ enumerable: true, get: function () { return errors_1.ethErrors; } }));\nconst error_constants_1 = __webpack_require__(/*! ./error-constants */ \"./node_modules/eth-rpc-errors/dist/error-constants.js\");\nObject.defineProperty(exports, \"errorCodes\", ({ enumerable: true, get: function () { return error_constants_1.errorCodes; } }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQW9FO0FBVWxFLGlHQVZPLDBCQUFnQixPQVVQO0FBQ2hCLHNHQVh5QiwrQkFBcUIsT0FXekI7QUFWdkIsbUNBRWlCO0FBU2YsK0ZBVkEsc0JBQWMsT0FVQTtBQUNkLG1HQVhnQiwwQkFBa0IsT0FXaEI7QUFUcEIscUNBQXFDO0FBS25DLDBGQUxPLGtCQUFTLE9BS1A7QUFKWCx1REFBK0M7QUFHN0MsMkZBSE8sNEJBQVUsT0FHUCJ9\n\n/***/ }),\n\n/***/ \"./node_modules/eth-rpc-errors/dist/utils.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/eth-rpc-errors/dist/utils.js ***!\n  \\***************************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\nconst error_constants_1 = __webpack_require__(/*! ./error-constants */ \"./node_modules/eth-rpc-errors/dist/error-constants.js\");\nconst classes_1 = __webpack_require__(/*! ./classes */ \"./node_modules/eth-rpc-errors/dist/classes.js\");\nconst FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n    code: FALLBACK_ERROR_CODE,\n    message: getMessageFromCode(FALLBACK_ERROR_CODE),\n};\nexports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n    if (Number.isInteger(code)) {\n        const codeString = code.toString();\n        if (hasKey(error_constants_1.errorValues, codeString)) {\n            return error_constants_1.errorValues[codeString].message;\n        }\n        if (isJsonRpcServerError(code)) {\n            return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n        }\n    }\n    return fallbackMessage;\n}\nexports.getMessageFromCode = getMessageFromCode;\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n */\nfunction isValidCode(code) {\n    if (!Number.isInteger(code)) {\n        return false;\n    }\n    const codeString = code.toString();\n    if (error_constants_1.errorValues[codeString]) {\n        return true;\n    }\n    if (isJsonRpcServerError(code)) {\n        return true;\n    }\n    return false;\n}\nexports.isValidCode = isValidCode;\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n */\nfunction serializeError(error, { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false, } = {}) {\n    var _a, _b;\n    if (!fallbackError ||\n        !Number.isInteger(fallbackError.code) ||\n        typeof fallbackError.message !== 'string') {\n        throw new Error('Must provide fallback error with integer number code and string message.');\n    }\n    if (error instanceof classes_1.EthereumRpcError) {\n        return error.serialize();\n    }\n    const serialized = {};\n    if (error &&\n        typeof error === 'object' &&\n        !Array.isArray(error) &&\n        hasKey(error, 'code') &&\n        isValidCode(error.code)) {\n        const _error = error;\n        serialized.code = _error.code;\n        if (_error.message && typeof _error.message === 'string') {\n            serialized.message = _error.message;\n            if (hasKey(_error, 'data')) {\n                serialized.data = _error.data;\n            }\n        }\n        else {\n            serialized.message = getMessageFromCode(serialized.code);\n            serialized.data = { originalError: assignOriginalError(error) };\n        }\n    }\n    else {\n        serialized.code = fallbackError.code;\n        const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n        serialized.message = (message && typeof message === 'string'\n            ? message\n            : fallbackError.message);\n        serialized.data = { originalError: assignOriginalError(error) };\n    }\n    const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n    if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n        serialized.stack = stack;\n    }\n    return serialized;\n}\nexports.serializeError = serializeError;\n// Internal\nfunction isJsonRpcServerError(code) {\n    return code >= -32099 && code <= -32000;\n}\nfunction assignOriginalError(error) {\n    if (error && typeof error === 'object' && !Array.isArray(error)) {\n        return Object.assign({}, error);\n    }\n    return error;\n}\nfunction hasKey(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQTREO0FBQzVELHVDQUF5RTtBQUV6RSxNQUFNLG1CQUFtQixHQUFHLDRCQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUNwRCxNQUFNLGdCQUFnQixHQUFHLDZEQUE2RCxDQUFDO0FBQ3ZGLE1BQU0sY0FBYyxHQUErQjtJQUNqRCxJQUFJLEVBQUUsbUJBQW1CO0lBQ3pCLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQztDQUNqRCxDQUFDO0FBRVcsUUFBQSw2QkFBNkIsR0FBRywyQkFBMkIsQ0FBQztBQUl6RTs7O0dBR0c7QUFDSCxTQUFnQixrQkFBa0IsQ0FDaEMsSUFBWSxFQUNaLGtCQUEwQixnQkFBZ0I7SUFFMUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzFCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVuQyxJQUFJLE1BQU0sQ0FBQyw2QkFBVyxFQUFFLFVBQVUsQ0FBQyxFQUFFO1lBQ25DLE9BQU8sNkJBQVcsQ0FBQyxVQUEyQixDQUFDLENBQUMsT0FBTyxDQUFDO1NBQ3pEO1FBQ0QsSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QixPQUFPLHFDQUE2QixDQUFDO1NBQ3RDO0tBQ0Y7SUFDRCxPQUFPLGVBQWUsQ0FBQztBQUN6QixDQUFDO0FBZkQsZ0RBZUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixXQUFXLENBQUMsSUFBWTtJQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMzQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25DLElBQUksNkJBQVcsQ0FBQyxVQUEyQixDQUFDLEVBQUU7UUFDNUMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDOUIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQWRELGtDQWNDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixjQUFjLENBQzVCLEtBQWMsRUFDZCxFQUNFLGFBQWEsR0FBRyxjQUFjLEVBQzlCLGtCQUFrQixHQUFHLEtBQUssR0FDM0IsR0FBRyxFQUFFOztJQUdOLElBQ0UsQ0FBQyxhQUFhO1FBQ2QsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDckMsT0FBTyxhQUFhLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFDekM7UUFDQSxNQUFNLElBQUksS0FBSyxDQUNiLDBFQUEwRSxDQUMzRSxDQUFDO0tBQ0g7SUFFRCxJQUFJLEtBQUssWUFBWSwwQkFBZ0IsRUFBRTtRQUNyQyxPQUFPLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztLQUMxQjtJQUVELE1BQU0sVUFBVSxHQUF3QyxFQUFFLENBQUM7SUFFM0QsSUFDRSxLQUFLO1FBQ0wsT0FBTyxLQUFLLEtBQUssUUFBUTtRQUN6QixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxLQUFnQyxFQUFFLE1BQU0sQ0FBQztRQUNoRCxXQUFXLENBQUUsS0FBb0MsQ0FBQyxJQUFJLENBQUMsRUFDdkQ7UUFDQSxNQUFNLE1BQU0sR0FBRyxLQUE0QyxDQUFDO1FBQzVELFVBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUU5QixJQUFJLE1BQU0sQ0FBQyxPQUFPLElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUN4RCxVQUFVLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFFcEMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUMxQixVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7YUFDL0I7U0FDRjthQUFNO1lBQ0wsVUFBVSxDQUFDLE9BQU8sR0FBRyxrQkFBa0IsQ0FDcEMsVUFBeUMsQ0FBQyxJQUFJLENBQ2hELENBQUM7WUFFRixVQUFVLENBQUMsSUFBSSxHQUFHLEVBQUUsYUFBYSxFQUFFLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDakU7S0FDRjtTQUFNO1FBQ0wsVUFBVSxDQUFDLElBQUksR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDO1FBRXJDLE1BQU0sT0FBTyxTQUFJLEtBQWEsMENBQUUsT0FBTyxDQUFDO1FBRXhDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsQ0FDbkIsT0FBTyxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVE7WUFDcEMsQ0FBQyxDQUFDLE9BQU87WUFDVCxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FDMUIsQ0FBQztRQUNGLFVBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxhQUFhLEVBQUUsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztLQUNqRTtJQUVELE1BQU0sS0FBSyxTQUFJLEtBQWEsMENBQUUsS0FBSyxDQUFDO0lBRXBDLElBQUksa0JBQWtCLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDckUsVUFBVSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7S0FDMUI7SUFDRCxPQUFPLFVBQXdDLENBQUM7QUFDbEQsQ0FBQztBQWxFRCx3Q0FrRUM7QUFFRCxXQUFXO0FBRVgsU0FBUyxvQkFBb0IsQ0FBQyxJQUFZO0lBQ3hDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztBQUMxQyxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxLQUFjO0lBQ3pDLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNqQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLEdBQTRCLEVBQUUsR0FBVztJQUN2RCxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDeEQsQ0FBQyJ9\n\n/***/ }),\n\n/***/ \"./node_modules/events/events.js\":\n/*!***************************************!*\\\n  !*** ./node_modules/events/events.js ***!\n  \\***************************************/\n/***/ ((module) => {\n\n\"use strict\";\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n/***/ }),\n\n/***/ \"./node_modules/fast-safe-stringify/index.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/fast-safe-stringify/index.js ***!\n  \\***************************************************/\n/***/ ((module) => {\n\nmodule.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar LIMIT_REPLACE_NODE = '[...]'\nvar CIRCULAR_REPLACE_NODE = '[Circular]'\n\nvar arr = []\nvar replacerStack = []\n\nfunction defaultOptions () {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  }\n}\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  decirc(obj, '', 0, [], undefined, 0, options)\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer)\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction setReplace (replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, { value: replace })\n      arr.push([parent, k, val, propertyDescriptor])\n    } else {\n      replacerStack.push([val, k, replace])\n    }\n  } else {\n    parent[k] = replace\n    arr.push([parent, k, val])\n  }\n}\n\nfunction decirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, i, stack, val, depth, options)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer)\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return\n      }\n    } catch (_) {\n      return\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, i, stack, val, depth, options)\n        tmp[key] = val[key]\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues (replacer) {\n  replacer =\n    typeof replacer !== 'undefined'\n      ? replacer\n      : function (k, v) {\n        return v\n      }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = part[2]\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n\n\n/***/ }),\n\n/***/ \"./node_modules/loglevel/lib/loglevel.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/loglevel/lib/loglevel.js ***!\n  \\***********************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n\n\n/***/ }),\n\n/***/ \"../background/src/utils/types/communication.ts\":\n/*!******************************************************!*\\\n  !*** ../background/src/utils/types/communication.ts ***!\n  \\******************************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BackgroundActions = exports.Origin = exports.Messages = exports.CONTENT = exports.EXTERNAL = void 0;\r\nvar ACCOUNT;\r\n(function (ACCOUNT) {\r\n    ACCOUNT[\"CREATE\"] = \"CREATE_ACCOUNT\";\r\n    ACCOUNT[\"EXPORT_JSON\"] = \"EXPORT_ACCOUNT_JSON\";\r\n    ACCOUNT[\"EXPORT_PRIVATE_KEY\"] = \"EXPORT_ACCOUNT_PK\";\r\n    ACCOUNT[\"IMPORT_JSON\"] = \"IMPORT_ACCOUNT_JSON\";\r\n    ACCOUNT[\"IMPORT_PRIVATE_KEY\"] = \"IMPORT_ACCOUNT_PK\";\r\n    ACCOUNT[\"REMOVE\"] = \"REMOVE_ACCOUNT\";\r\n    ACCOUNT[\"RESET\"] = \"RESET_ACCOUNT\";\r\n    ACCOUNT[\"RENAME\"] = \"RENAME_ACCOUNT\";\r\n    ACCOUNT[\"SELECT\"] = \"SELECT_ACCOUNT\";\r\n    ACCOUNT[\"GET_BALANCE\"] = \"GET_ACCOUNT_BALANCE\";\r\n    ACCOUNT[\"HIDE\"] = \"HIDE_ACCOUNT\";\r\n    ACCOUNT[\"UNHIDE\"] = \"UNHIDE_ACCOUNT\";\r\n    ACCOUNT[\"GET_NATIVE_TOKEN_BALANCE\"] = \"GET_NATIVE_TOKEN_BALANCE\";\r\n})(ACCOUNT || (ACCOUNT = {}));\r\nvar APP;\r\n(function (APP) {\r\n    APP[\"LOCK\"] = \"LOCK_APP\";\r\n    APP[\"UNLOCK\"] = \"UNLOCK_APP\";\r\n    APP[\"GET_IDLE_TIMEOUT\"] = \"GET_IDLE_TIMEOUT\";\r\n    APP[\"SET_IDLE_TIMEOUT\"] = \"SET_IDLE_TIMEOUT\";\r\n    APP[\"SET_LAST_USER_ACTIVE_TIME\"] = \"SET_LAST_USER_ACTIVE_TIME\";\r\n    APP[\"RETURN_TO_ONBOARDING\"] = \"RETURN_TO_ONBOARDING\";\r\n    APP[\"OPEN_RESET\"] = \"OPEN_RESET\";\r\n    APP[\"OPEN_HW_CONNECT\"] = \"OPEN_HW_CONNECT\";\r\n    APP[\"OPEN_HW_REMOVE\"] = \"OPEN_HW_REMOVE\";\r\n    APP[\"OPEN_HW_RECONNECT\"] = \"OPEN_HW_RECONNECT\";\r\n    APP[\"SET_USER_SETTINGS\"] = \"SET_USER_SETTINGS\";\r\n    APP[\"UPDATE_POPUP_TAB\"] = \"UPDATE_POPUP_TAB\";\r\n    APP[\"REJECT_UNCONFIRMED_REQUESTS\"] = \"REJECT_UNCONFIRMED_REQUESTS\";\r\n    APP[\"SET_USER_ONLINE\"] = \"SET_USER_ONLINE\";\r\n})(APP || (APP = {}));\r\nvar BACKGROUND;\r\n(function (BACKGROUND) {\r\n    BACKGROUND[\"ACTION\"] = \"ACTION\";\r\n})(BACKGROUND || (BACKGROUND = {}));\r\nvar DAPP;\r\n(function (DAPP) {\r\n    DAPP[\"CONFIRM_REQUEST\"] = \"CONFIRM_DAPP_REQUEST\";\r\n    DAPP[\"ATTEMPT_REJECT_REQUEST\"] = \"ATTEMPT_REJECT_DAPP_REQUEST\";\r\n})(DAPP || (DAPP = {}));\r\nvar EXCHANGE;\r\n(function (EXCHANGE) {\r\n    EXCHANGE[\"CHECK_ALLOWANCE\"] = \"CHECK_ALLOWANCE\";\r\n    EXCHANGE[\"APPROVE\"] = \"APPROVE_EXCHANGE\";\r\n    EXCHANGE[\"GET_QUOTE\"] = \"GET_EXCHANGE_QUOTE\";\r\n    EXCHANGE[\"GET_EXCHANGE\"] = \"GET_EXCHANGE\";\r\n    EXCHANGE[\"EXECUTE\"] = \"EXECUTE_EXCHANGE\";\r\n})(EXCHANGE || (EXCHANGE = {}));\r\nvar BRIDGE;\r\n(function (BRIDGE) {\r\n    BRIDGE[\"APPROVE_BRIDGE_ALLOWANCE\"] = \"APPROVE_BRIDGE_ALLOWANCE\";\r\n    BRIDGE[\"GET_BRIDGE_AVAILABLE_CHAINS\"] = \"GET_BRIDGE_AVAILABLE_CHAINS\";\r\n    BRIDGE[\"GET_BRIDGE_TOKENS\"] = \"GET_BRIDGE_TOKENS\";\r\n    BRIDGE[\"GET_BRIDGE_QUOTE\"] = \"GET_BRIDGE_QUOTE\";\r\n    BRIDGE[\"GET_BRIDGE_ROUTES\"] = \"GET_BRIDGE_ROUTES\";\r\n    BRIDGE[\"EXECUTE_BRIDGE\"] = \"EXECUTE_BRIDGE\";\r\n})(BRIDGE || (BRIDGE = {}));\r\nvar EXTERNAL;\r\n(function (EXTERNAL) {\r\n    EXTERNAL[\"EVENT_SUBSCRIPTION\"] = \"EVENT_SUBSCRIPTION\";\r\n    EXTERNAL[\"REQUEST\"] = \"EXTERNAL_REQUEST\";\r\n    EXTERNAL[\"SETUP_PROVIDER\"] = \"SETUP_PROVIDER\";\r\n    EXTERNAL[\"SW_REINIT\"] = \"SW_REINIT\";\r\n    EXTERNAL[\"SET_ICON\"] = \"SET_ICON\";\r\n    EXTERNAL[\"GET_PROVIDER_CONFIG\"] = \"GET_PROVIDER_CONFIG\";\r\n})(EXTERNAL = exports.EXTERNAL || (exports.EXTERNAL = {}));\r\nvar CONTENT;\r\n(function (CONTENT) {\r\n    CONTENT[\"SHOULD_INJECT\"] = \"SHOULD_INJECT\";\r\n    CONTENT[\"SW_KEEP_ALIVE\"] = \"SW_KEEP_ALIVE\";\r\n})(CONTENT = exports.CONTENT || (exports.CONTENT = {}));\r\nvar NETWORK;\r\n(function (NETWORK) {\r\n    NETWORK[\"CHANGE\"] = \"NETWORK_CHANGE\";\r\n    NETWORK[\"SET_SHOW_TEST_NETWORKS\"] = \"SHOW_TEST_NETWORKS\";\r\n    NETWORK[\"ADD_NETWORK\"] = \"ADD_NETWORK\";\r\n    NETWORK[\"EDIT_NETWORK\"] = \"EDIT_NETWORK\";\r\n    NETWORK[\"EDIT_NETWORKS_ORDER\"] = \"EDIT_NETWORKS_ORDER\";\r\n    NETWORK[\"REMOVE_NETWORK\"] = \"REMOVE_NETWORK\";\r\n    NETWORK[\"GET_SPECIFIC_CHAIN_DETAILS\"] = \"GET_SPECIFIC_CHAIN_DETAILS\";\r\n    NETWORK[\"GET_RPC_CHAIN_ID\"] = \"GET_RPC_CHAIN_ID\";\r\n    NETWORK[\"SEARCH_CHAINS\"] = \"SEARCH_CHAINS\";\r\n})(NETWORK || (NETWORK = {}));\r\nvar PASSWORD;\r\n(function (PASSWORD) {\r\n    PASSWORD[\"VERIFY\"] = \"VERIFY_PASSWORD\";\r\n    PASSWORD[\"CHANGE\"] = \"CHANGE_PASSWORD\";\r\n})(PASSWORD || (PASSWORD = {}));\r\nvar PERMISSION;\r\n(function (PERMISSION) {\r\n    PERMISSION[\"ADD_NEW\"] = \"ADD_NEW_SITE_PERMISSIONS\";\r\n    PERMISSION[\"CONFIRM\"] = \"CONFIRM_PERMISSION_REQUEST\";\r\n    PERMISSION[\"GET_ACCOUNT_PERMISSIONS\"] = \"GET_ACCOUNT_PERMISSIONS\";\r\n    PERMISSION[\"REMOVE_ACCOUNT_FROM_SITE\"] = \"REMOVE_ACCOUNT_FROM_SITE\";\r\n    PERMISSION[\"UPDATE_SITE_PERMISSIONS\"] = \"UPDATE_SITE_PERMISSIONS\";\r\n})(PERMISSION || (PERMISSION = {}));\r\nvar STATE;\r\n(function (STATE) {\r\n    STATE[\"GET\"] = \"GET_STATE\";\r\n    STATE[\"SUBSCRIBE\"] = \"STATE_SUBSCRIBE\";\r\n    STATE[\"GET_REMOTE_CONFIG\"] = \"GET_REMOTE_CONFIG\";\r\n})(STATE || (STATE = {}));\r\nvar ENS;\r\n(function (ENS) {\r\n    ENS[\"LOOKUP_ADDRESS\"] = \"LOOKUP_ADDRESS_ENS\";\r\n    ENS[\"RESOLVE_NAME\"] = \"RESOLVE_ENS_NAME\";\r\n})(ENS || (ENS = {}));\r\nvar UD;\r\n(function (UD) {\r\n    UD[\"RESOLVE_NAME\"] = \"RESOLVE_UD_NAME\";\r\n})(UD || (UD = {}));\r\nvar TRANSACTION;\r\n(function (TRANSACTION) {\r\n    TRANSACTION[\"ADD_NEW_SEND_TRANSACTION\"] = \"ADD_NEW_SEND_TRANSACTION\";\r\n    TRANSACTION[\"UPDATE_SEND_TRANSACTION_GAS\"] = \"UPDATE_SEND_TRANSACTION_GAS\";\r\n    TRANSACTION[\"APPROVE_SEND_TRANSACTION\"] = \"APPROVE_SEND_TRANSACTION\";\r\n    TRANSACTION[\"GET_SEND_TRANSACTION_RESULT\"] = \"GET_SEND_TRANSACTION_RESULT\";\r\n    TRANSACTION[\"CALCULATE_SEND_TRANSACTION_GAS_LIMIT\"] = \"CALCULATE_SEND_TRANSACTION_GAS_LIMIT\";\r\n    TRANSACTION[\"CALCULATE_APPROVE_TRANSACTION_GAS_LIMIT\"] = \"CALCULATE_APPROVE_TRANSACTION_GAS_LIMIT\";\r\n    TRANSACTION[\"CONFIRM\"] = \"CONFIRM_TRANSACTION\";\r\n    TRANSACTION[\"REJECT\"] = \"REJECT_TRANSACTION\";\r\n    TRANSACTION[\"GET_LATEST_GAS_PRICE\"] = \"GET_LATEST_GAS_PRICE\";\r\n    TRANSACTION[\"FETCH_LATEST_GAS_PRICE\"] = \"FETCH_LATEST_GAS_PRICE\";\r\n    TRANSACTION[\"SEND_ETHER\"] = \"SEND_ETHER\";\r\n    TRANSACTION[\"CANCEL_TRANSACTION\"] = \"CANCEL_TRANSACTION\";\r\n    TRANSACTION[\"SPEED_UP_TRANSACTION\"] = \"SPEED_UP_TRANSACTION\";\r\n    TRANSACTION[\"GET_SPEED_UP_GAS_PRICE\"] = \"GET_SPEED_UP_GAS_PRICE\";\r\n    TRANSACTION[\"GET_CANCEL_GAS_PRICE\"] = \"GET_CANCEL_GAS_PRICE\";\r\n    TRANSACTION[\"GET_NEXT_NONCE\"] = \"GET_NEXT_NONCE\";\r\n    TRANSACTION[\"REJECT_REPLACEMENT_TRANSACTION\"] = \"REJECT_REPLACEMENT_TRANSACTION\";\r\n})(TRANSACTION || (TRANSACTION = {}));\r\nvar WALLET;\r\n(function (WALLET) {\r\n    WALLET[\"CREATE\"] = \"CREATE_WALLET\";\r\n    WALLET[\"IMPORT\"] = \"IMPORT_WALLET\";\r\n    WALLET[\"VERIFY_SEED_PHRASE\"] = \"VERIFY_SEED_PHRASE\";\r\n    WALLET[\"REQUEST_SEED_PHRASE\"] = \"REQUEST_SEED_PHRASE\";\r\n    WALLET[\"SETUP_COMPLETE\"] = \"SETUP_COMPLETE\";\r\n    WALLET[\"RESET\"] = \"RESET\";\r\n    WALLET[\"DISMISS_WELCOME_MESSAGE\"] = \"DISMISS_WELCOME_MESSAGE\";\r\n    WALLET[\"DISMISS_DEFAULT_WALLET_PREFERENCES\"] = \"DISMISS_DEFAULT_WALLET_PREFERENCES\";\r\n    WALLET[\"DISMISS_RELEASE_NOTES\"] = \"DISMISS_RELEASE_NOTES\";\r\n    WALLET[\"TOGGLE_RELEASE_NOTES_SUBSCRIPTION\"] = \"TOGGLE_RELEASE_NOTES_SUBSCRIPTION\";\r\n    WALLET[\"GENERATE_ON_DEMAND_RELEASE_NOTES\"] = \"GENERATE_ON_DEMAND_RELEASE_NOTES\";\r\n    WALLET[\"UPDATE_ANTI_PHISHING_IMAGE\"] = \"UPDATE_ANTI_PHISHING_IMAGE\";\r\n    WALLET[\"TOGGLE_ANTI_PHISHING_PROTECTION\"] = \"TOGGLE_ANTI_PHISHING_PROTECTION\";\r\n    WALLET[\"TOGGLE_DEFAULT_BROWSER_WALLET\"] = \"TOGGLE_DEFAULT_BROWSER_WALLET\";\r\n    WALLET[\"SET_NATIVE_CURRENCY\"] = \"SET_NATIVE_CURRENCY\";\r\n    WALLET[\"GET_VALID_CURRENCIES\"] = \"GET_VALID_CURRENCIES\";\r\n    WALLET[\"HARDWARE_CONNECT\"] = \"HARDWARE_CONNECT\";\r\n    WALLET[\"HARDWARE_REMOVE\"] = \"HARDWARE_REMOVE\";\r\n    WALLET[\"HARDWARE_GET_ACCOUNTS\"] = \"HARDWARE_GET_ACCOUNTS\";\r\n    WALLET[\"HARDWARE_IMPORT_ACCOUNTS\"] = \"HARDWARE_IMPORT_ACCOUNTS\";\r\n    WALLET[\"HARDWARE_GET_HD_PATH\"] = \"HARDWARE_GET_HD_PATH\";\r\n    WALLET[\"HARDWARE_SET_HD_PATH\"] = \"HARDWARE_SET_HD_PATH\";\r\n    WALLET[\"HARDWARE_IS_LINKED\"] = \"HARDWARE_IS_LINKED\";\r\n    WALLET[\"SET_DEFAULT_GAS\"] = \"SET_DEFAULT_GAS\";\r\n})(WALLET || (WALLET = {}));\r\nvar TOKEN;\r\n(function (TOKEN) {\r\n    TOKEN[\"GET_BALANCE\"] = \"GET_TOKEN_BALANCE\";\r\n    TOKEN[\"GET_TOKENS\"] = \"GET_TOKENS\";\r\n    TOKEN[\"GET_USER_TOKENS\"] = \"GET_USER_TOKENS\";\r\n    TOKEN[\"GET_TOKEN\"] = \"GET_TOKEN\";\r\n    TOKEN[\"ADD_CUSTOM_TOKEN\"] = \"ADD_CUSTOM_TOKEN\";\r\n    TOKEN[\"DELETE_CUSTOM_TOKEN\"] = \"DELETE_CUSTOM_TOKEN\";\r\n    TOKEN[\"ADD_CUSTOM_TOKENS\"] = \"ADD_CUSTOM_TOKENS\";\r\n    TOKEN[\"SEND_TOKEN\"] = \"SEND_TOKEN\";\r\n    TOKEN[\"POPULATE_TOKEN_DATA\"] = \"POPULATE_TOKEN_DATA\";\r\n    TOKEN[\"SEARCH_TOKEN\"] = \"SEARCH_TOKEN\";\r\n})(TOKEN || (TOKEN = {}));\r\nvar ADDRESS_BOOK;\r\n(function (ADDRESS_BOOK) {\r\n    ADDRESS_BOOK[\"CLEAR\"] = \"CLEAR\";\r\n    ADDRESS_BOOK[\"DELETE\"] = \"DELETE\";\r\n    ADDRESS_BOOK[\"SET\"] = \"SET\";\r\n    ADDRESS_BOOK[\"GET\"] = \"GET\";\r\n    ADDRESS_BOOK[\"GET_BY_ADDRESS\"] = \"GET_BY_ADDRESS\";\r\n    ADDRESS_BOOK[\"GET_RECENT_ADDRESSES\"] = \"GET_RECENT_ADDRESSES\";\r\n})(ADDRESS_BOOK || (ADDRESS_BOOK = {}));\r\nvar BROWSER;\r\n(function (BROWSER) {\r\n    BROWSER[\"GET_WINDOW_ID\"] = \"GET_WINDOW_ID\";\r\n})(BROWSER || (BROWSER = {}));\r\nvar FILTERS;\r\n(function (FILTERS) {\r\n    FILTERS[\"SET_ACCOUNT_FILTERS\"] = \"SET_ACCOUNT_FILTERS\";\r\n})(FILTERS || (FILTERS = {}));\r\nexports.Messages = {\r\n    ACCOUNT,\r\n    APP,\r\n    BACKGROUND,\r\n    CONTENT,\r\n    DAPP,\r\n    EXCHANGE,\r\n    EXTERNAL,\r\n    NETWORK,\r\n    PASSWORD,\r\n    PERMISSION,\r\n    STATE,\r\n    ENS,\r\n    UD,\r\n    TRANSACTION,\r\n    WALLET,\r\n    TOKEN,\r\n    ADDRESS_BOOK,\r\n    BROWSER,\r\n    FILTERS,\r\n    BRIDGE,\r\n};\r\nvar Origin;\r\n(function (Origin) {\r\n    Origin[\"BACKGROUND\"] = \"BLANK_BACKGROUND\";\r\n    Origin[\"EXTENSION\"] = \"BLANK_EXTENSION\";\r\n    Origin[\"PROVIDER\"] = \"BLANK_PROVIDER\";\r\n    Origin[\"TREZOR_CONNECT\"] = \"trezor-connect\";\r\n})(Origin = exports.Origin || (exports.Origin = {}));\r\nvar BackgroundActions;\r\n(function (BackgroundActions) {\r\n    BackgroundActions[\"CLOSE_WINDOW\"] = \"CLOSE_WINDOW\";\r\n})(BackgroundActions = exports.BackgroundActions || (exports.BackgroundActions = {}));\r\n\n\n/***/ }),\n\n/***/ \"../background/src/utils/types/ethereum.ts\":\n/*!*************************************************!*\\\n  !*** ../background/src/utils/types/ethereum.ts ***!\n  \\*************************************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ExtProviderMethods = exports.JSONRPCMethod = exports.typedMessageSchema = exports.sigVersion = exports.SubscriptionType = exports.DappRequestSigningStatus = exports.DappReq = exports.WindowRequest = exports.ProviderError = void 0;\r\nvar ProviderError;\r\n(function (ProviderError) {\r\n    ProviderError[\"INVALID_PARAMS\"] = \"INVALID_PARAMS\";\r\n    ProviderError[\"RESOURCE_UNAVAILABLE\"] = \"RESOURCE_UNAVAILABLE\";\r\n    ProviderError[\"TRANSACTION_REJECTED\"] = \"TRANSACTION_REJECTED\";\r\n    ProviderError[\"UNAUTHORIZED\"] = \"UNAUTHORIZED\";\r\n    ProviderError[\"UNSUPPORTED_METHOD\"] = \"UNSUPPORTED_METHOD\";\r\n    ProviderError[\"UNSUPPORTED_SUBSCRIPTION_TYPE\"] = \"UNSUPPORTED_SUBSCRIPTION_TYPE\";\r\n    ProviderError[\"USER_REJECTED_REQUEST\"] = \"USER_REJECTED_REQUEST\";\r\n})(ProviderError = exports.ProviderError || (exports.ProviderError = {}));\r\n// Types for window management\r\nvar WindowRequest;\r\n(function (WindowRequest) {\r\n    WindowRequest[\"DAPP\"] = \"DAPP\";\r\n    WindowRequest[\"LOCK\"] = \"LOCK\";\r\n    WindowRequest[\"PERMISSIONS\"] = \"PERMISSIONS\";\r\n    WindowRequest[\"TRANSACTIONS\"] = \"TRANSACTIONS\";\r\n})(WindowRequest = exports.WindowRequest || (exports.WindowRequest = {}));\r\n// Type of dapp request\r\nvar DappReq;\r\n(function (DappReq) {\r\n    DappReq[\"ASSET\"] = \"ASSET\";\r\n    DappReq[\"SIGNING\"] = \"SIGNING\";\r\n    DappReq[\"SWITCH_NETWORK\"] = \"SWITCH_NETWORK\";\r\n    DappReq[\"ADD_ETHEREUM_CHAIN\"] = \"ADD_ETHEREUM_CHAIN\";\r\n})(DappReq = exports.DappReq || (exports.DappReq = {}));\r\n// Dapp request optional status type\r\nvar DappRequestSigningStatus;\r\n(function (DappRequestSigningStatus) {\r\n    DappRequestSigningStatus[\"PENDING\"] = \"DAPP_PENDING\";\r\n    DappRequestSigningStatus[\"APPROVED\"] = \"DAPP_APPROVED\";\r\n    DappRequestSigningStatus[\"REJECTED\"] = \"DAPP_REJECTED\";\r\n    DappRequestSigningStatus[\"FAILED\"] = \"DAPP_FAILED\";\r\n    DappRequestSigningStatus[\"SIGNED\"] = \"DAPP_SIGNED\";\r\n})(DappRequestSigningStatus = exports.DappRequestSigningStatus || (exports.DappRequestSigningStatus = {}));\r\n// https://geth.ethereum.org/docs/rpc/pubsub\r\nvar SubscriptionType;\r\n(function (SubscriptionType) {\r\n    SubscriptionType[\"logs\"] = \"logs\";\r\n    SubscriptionType[\"newHeads\"] = \"newHeads\";\r\n    /**\r\n     * @unsupported\r\n     */\r\n    SubscriptionType[\"newPendingTransactions\"] = \"newPendingTransactions\";\r\n    /**\r\n     * @unsupported\r\n     */\r\n    SubscriptionType[\"syncing\"] = \"syncing\";\r\n})(SubscriptionType = exports.SubscriptionType || (exports.SubscriptionType = {}));\r\n// Adapt version to keyring sig util\r\nexports.sigVersion = {\r\n    eth_signTypedData: { version: 'V4' },\r\n    eth_signTypedData_v1: { version: 'V1' },\r\n    eth_signTypedData_v3: { version: 'V3' },\r\n    eth_signTypedData_v4: { version: 'V4' },\r\n};\r\nexports.typedMessageSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        types: {\r\n            type: 'object',\r\n            additionalProperties: {\r\n                type: 'array',\r\n                items: {\r\n                    type: 'object',\r\n                    properties: {\r\n                        name: { type: 'string' },\r\n                        type: { type: 'string' },\r\n                    },\r\n                    required: ['name', 'type'],\r\n                },\r\n            },\r\n        },\r\n        primaryType: { type: 'string' },\r\n        domain: { type: 'object' },\r\n        message: { type: 'object' },\r\n    },\r\n    required: ['types', 'primaryType', 'domain', 'message'],\r\n};\r\n// JSON RPC methods\r\nvar JSONRPCMethod;\r\n(function (JSONRPCMethod) {\r\n    JSONRPCMethod[\"db_getHex\"] = \"db_getHex\";\r\n    JSONRPCMethod[\"db_getString\"] = \"db_getString\";\r\n    JSONRPCMethod[\"db_putHex\"] = \"db_putHex\";\r\n    JSONRPCMethod[\"db_putString\"] = \"db_putString\";\r\n    JSONRPCMethod[\"eth_accounts\"] = \"eth_accounts\";\r\n    JSONRPCMethod[\"eth_blockNumber\"] = \"eth_blockNumber\";\r\n    JSONRPCMethod[\"eth_call\"] = \"eth_call\";\r\n    JSONRPCMethod[\"eth_chainId\"] = \"eth_chainId\";\r\n    JSONRPCMethod[\"eth_coinbase\"] = \"eth_coinbase\";\r\n    JSONRPCMethod[\"eth_compileLLL\"] = \"eth_compileLLL\";\r\n    JSONRPCMethod[\"eth_compileSerpent\"] = \"eth_compileSerpent\";\r\n    JSONRPCMethod[\"eth_compileSolidity\"] = \"eth_compileSolidity\";\r\n    JSONRPCMethod[\"eth_estimateGas\"] = \"eth_estimateGas\";\r\n    JSONRPCMethod[\"eth_feeHistory\"] = \"eth_feeHistory\";\r\n    JSONRPCMethod[\"eth_gasPrice\"] = \"eth_gasPrice\";\r\n    JSONRPCMethod[\"eth_getBalance\"] = \"eth_getBalance\";\r\n    JSONRPCMethod[\"eth_getBlockByHash\"] = \"eth_getBlockByHash\";\r\n    JSONRPCMethod[\"eth_getBlockByNumber\"] = \"eth_getBlockByNumber\";\r\n    JSONRPCMethod[\"eth_getBlockTransactionCountByHash\"] = \"eth_getBlockTransactionCountByHash\";\r\n    JSONRPCMethod[\"eth_getBlockTransactionCountByNumber\"] = \"eth_getBlockTransactionCountByNumber\";\r\n    JSONRPCMethod[\"eth_getCode\"] = \"eth_getCode\";\r\n    JSONRPCMethod[\"eth_getCompilers\"] = \"eth_getCompilers\";\r\n    JSONRPCMethod[\"eth_getFilterChanges\"] = \"eth_getFilterChanges\";\r\n    JSONRPCMethod[\"eth_getFilterLogs\"] = \"eth_getFilterLogs\";\r\n    JSONRPCMethod[\"eth_getLogs\"] = \"eth_getLogs\";\r\n    JSONRPCMethod[\"eth_getStorageAt\"] = \"eth_getStorageAt\";\r\n    JSONRPCMethod[\"eth_getTransactionByBlockHashAndIndex\"] = \"eth_getTransactionByBlockHashAndIndex\";\r\n    JSONRPCMethod[\"eth_getTransactionByBlockNumberAndIndex\"] = \"eth_getTransactionByBlockNumberAndIndex\";\r\n    JSONRPCMethod[\"eth_getTransactionByHash\"] = \"eth_getTransactionByHash\";\r\n    JSONRPCMethod[\"eth_getTransactionCount\"] = \"eth_getTransactionCount\";\r\n    JSONRPCMethod[\"eth_getTransactionReceipt\"] = \"eth_getTransactionReceipt\";\r\n    JSONRPCMethod[\"eth_getUncleByBlockHashAndIndex\"] = \"eth_getUncleByBlockHashAndIndex\";\r\n    JSONRPCMethod[\"eth_getUncleByBlockNumberAndIndex\"] = \"eth_getUncleByBlockNumberAndIndex\";\r\n    JSONRPCMethod[\"eth_getUncleCountByBlockHash\"] = \"eth_getUncleCountByBlockHash\";\r\n    JSONRPCMethod[\"eth_getUncleCountByBlockNumber\"] = \"eth_getUncleCountByBlockNumber\";\r\n    JSONRPCMethod[\"eth_getWork\"] = \"eth_getWork\";\r\n    JSONRPCMethod[\"eth_mining\"] = \"eth_mining\";\r\n    JSONRPCMethod[\"eth_newBlockFilter\"] = \"eth_newBlockFilter\";\r\n    JSONRPCMethod[\"eth_newFilter\"] = \"eth_newFilter\";\r\n    JSONRPCMethod[\"eth_protocolVersion\"] = \"eth_protocolVersion\";\r\n    JSONRPCMethod[\"eth_requestAccounts\"] = \"eth_requestAccounts\";\r\n    JSONRPCMethod[\"eth_sendRawTransaction\"] = \"eth_sendRawTransaction\";\r\n    JSONRPCMethod[\"eth_sendTransaction\"] = \"eth_sendTransaction\";\r\n    JSONRPCMethod[\"eth_sign\"] = \"eth_sign\";\r\n    JSONRPCMethod[\"eth_signTransaction\"] = \"eth_signTransaction\";\r\n    JSONRPCMethod[\"eth_signTypedData\"] = \"eth_signTypedData\";\r\n    JSONRPCMethod[\"eth_signTypedData_v1\"] = \"eth_signTypedData_v1\";\r\n    JSONRPCMethod[\"eth_signTypedData_v3\"] = \"eth_signTypedData_v3\";\r\n    JSONRPCMethod[\"eth_signTypedData_v4\"] = \"eth_signTypedData_v4\";\r\n    JSONRPCMethod[\"eth_submitWork\"] = \"eth_submitWork\";\r\n    JSONRPCMethod[\"eth_uninstallFilter\"] = \"eth_uninstallFilter\";\r\n    JSONRPCMethod[\"net_listening\"] = \"net_listening\";\r\n    JSONRPCMethod[\"net_peerCount\"] = \"net_peerCount\";\r\n    JSONRPCMethod[\"net_version\"] = \"net_version\";\r\n    JSONRPCMethod[\"personal_ecRecover\"] = \"personal_ecRecover\";\r\n    JSONRPCMethod[\"personal_sign\"] = \"personal_sign\";\r\n    JSONRPCMethod[\"shh_addToGroup\"] = \"shh_addToGroup\";\r\n    JSONRPCMethod[\"shh_getFilterChanges\"] = \"shh_getFilterChanges\";\r\n    JSONRPCMethod[\"shh_getMessages\"] = \"shh_getMessages\";\r\n    JSONRPCMethod[\"shh_hasIdentity\"] = \"shh_hasIdentity\";\r\n    JSONRPCMethod[\"shh_newFilter\"] = \"shh_newFilter\";\r\n    JSONRPCMethod[\"shh_newGroup\"] = \"shh_newGroup\";\r\n    JSONRPCMethod[\"shh_newIdentity\"] = \"shh_newIdentity\";\r\n    JSONRPCMethod[\"shh_post\"] = \"shh_post\";\r\n    JSONRPCMethod[\"shh_uninstallFilter\"] = \"shh_uninstallFilter\";\r\n    JSONRPCMethod[\"shh_version\"] = \"shh_version\";\r\n    JSONRPCMethod[\"wallet_addEthereumChain\"] = \"wallet_addEthereumChain\";\r\n    JSONRPCMethod[\"wallet_switchEthereumChain\"] = \"wallet_switchEthereumChain\";\r\n    JSONRPCMethod[\"wallet_getPermissions\"] = \"wallet_getPermissions\";\r\n    JSONRPCMethod[\"wallet_requestPermissions\"] = \"wallet_requestPermissions\";\r\n    JSONRPCMethod[\"wallet_watchAsset\"] = \"wallet_watchAsset\";\r\n    JSONRPCMethod[\"web3_clientVersion\"] = \"web3_clientVersion\";\r\n    JSONRPCMethod[\"web3_sha3\"] = \"web3_sha3\";\r\n    // pub/sub\r\n    JSONRPCMethod[\"eth_subscribe\"] = \"eth_subscribe\";\r\n    JSONRPCMethod[\"eth_unsubscribe\"] = \"eth_unsubscribe\";\r\n})(JSONRPCMethod = exports.JSONRPCMethod || (exports.JSONRPCMethod = {}));\r\n// External provider methods\r\nexports.ExtProviderMethods = [\r\n    JSONRPCMethod.eth_call,\r\n    JSONRPCMethod.eth_estimateGas,\r\n    JSONRPCMethod.eth_feeHistory,\r\n    JSONRPCMethod.eth_gasPrice,\r\n    JSONRPCMethod.eth_getBalance,\r\n    JSONRPCMethod.eth_getBlockByHash,\r\n    JSONRPCMethod.eth_getBlockByNumber,\r\n    JSONRPCMethod.eth_getBlockTransactionCountByHash,\r\n    JSONRPCMethod.eth_getBlockTransactionCountByNumber,\r\n    JSONRPCMethod.eth_getCode,\r\n    JSONRPCMethod.eth_getLogs,\r\n    JSONRPCMethod.eth_getStorageAt,\r\n    JSONRPCMethod.eth_getTransactionByBlockHashAndIndex,\r\n    JSONRPCMethod.eth_getTransactionByBlockNumberAndIndex,\r\n    JSONRPCMethod.eth_getTransactionByHash,\r\n    JSONRPCMethod.eth_getTransactionCount,\r\n    JSONRPCMethod.eth_getTransactionReceipt,\r\n    JSONRPCMethod.eth_getUncleByBlockHashAndIndex,\r\n    JSONRPCMethod.eth_getUncleByBlockNumberAndIndex,\r\n    JSONRPCMethod.eth_getUncleCountByBlockHash,\r\n    JSONRPCMethod.eth_getUncleCountByBlockNumber,\r\n    JSONRPCMethod.eth_getWork,\r\n    JSONRPCMethod.eth_mining,\r\n    JSONRPCMethod.eth_protocolVersion,\r\n    JSONRPCMethod.eth_sendRawTransaction,\r\n    JSONRPCMethod.eth_submitWork,\r\n    JSONRPCMethod.net_listening,\r\n    JSONRPCMethod.net_peerCount,\r\n    JSONRPCMethod.net_version,\r\n    JSONRPCMethod.web3_clientVersion,\r\n];\r\n\n\n/***/ }),\n\n/***/ \"./src/index.ts\":\n/*!**********************!*\\\n  !*** ./src/index.ts ***!\n  \\**********************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst BlankProvider_1 = __importDefault(__webpack_require__(/*! ./provider/BlankProvider */ \"./src/provider/BlankProvider.ts\"));\r\nconst communication_1 = __webpack_require__(/*! @block-wallet/background/utils/types/communication */ \"../background/src/utils/types/communication.ts\");\r\nconst loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\"));\r\nconst shimWeb3_1 = __importDefault(__webpack_require__(/*! ./utils/shimWeb3 */ \"./src/utils/shimWeb3.ts\"));\r\n// Setting the default log level:\r\nloglevel_1.default.setLevel(\"error\" || 0);\r\nconst blankProvider = new BlankProvider_1.default();\r\nconst provider = new Proxy(blankProvider, {\r\n    deleteProperty: () => true,\r\n});\r\n(0, shimWeb3_1.default)(provider);\r\nwindow.ethereum = provider;\r\nwindow.dispatchEvent(new CustomEvent('ethereum#initialized', { detail: 'isBlockWallet' }));\r\n// Listens to events generated by the background script\r\nwindow.addEventListener('message', ({ data, source, }) => {\r\n    // Only allow messages from our window, by the loader\r\n    if (source !== window ||\r\n        data.origin !== communication_1.Origin.BACKGROUND ||\r\n        !blankProvider) {\r\n        return;\r\n    }\r\n    // Check if we're reinitializing the SW\r\n    if ('signal' in data) {\r\n        blankProvider.handleSignal(data.signal);\r\n    }\r\n    else if (data.id) {\r\n        blankProvider.handleResponse(data);\r\n    }\r\n    else {\r\n        loglevel_1.default.error('Missing response id.');\r\n    }\r\n});\r\n\n\n/***/ }),\n\n/***/ \"./src/provider/BlankProvider.ts\":\n/*!***************************************!*\\\n  !*** ./src/provider/BlankProvider.ts ***!\n  \\***************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n/* eslint-disable @typescript-eslint/ban-ts-comment */\r\nconst types_1 = __webpack_require__(/*! ../types */ \"./src/types.ts\");\r\nconst communication_1 = __webpack_require__(/*! @block-wallet/background/utils/types/communication */ \"../background/src/utils/types/communication.ts\");\r\nconst safe_event_emitter_1 = __importDefault(__webpack_require__(/*! @metamask/safe-event-emitter */ \"./node_modules/@metamask/safe-event-emitter/index.js\"));\r\nconst eth_rpc_errors_1 = __webpack_require__(/*! eth-rpc-errors */ \"./node_modules/eth-rpc-errors/dist/index.js\");\r\nconst site_1 = __webpack_require__(/*! ../utils/site */ \"./src/utils/site.ts\");\r\nconst ethereum_1 = __webpack_require__(/*! @block-wallet/background/utils/types/ethereum */ \"../background/src/utils/types/ethereum.ts\");\r\nconst errors_1 = __webpack_require__(/*! ../utils/errors */ \"./src/utils/errors.ts\");\r\nconst loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\"));\r\nconst compatibility_1 = __webpack_require__(/*! ../utils/compatibility */ \"./src/utils/compatibility.ts\");\r\nconst MAX_EVENT_LISTENERS = 100;\r\n/**\r\n * Blank Provider\r\n *\r\n */\r\nclass BlankProvider extends safe_event_emitter_1.default {\r\n    constructor() {\r\n        super();\r\n        this.isBlockWallet = true;\r\n        this.isMetaMask = true;\r\n        /**\r\n         * Public method to check if the provider is connected\r\n         *\r\n         */\r\n        this.isConnected = () => {\r\n            return this._state.isConnected;\r\n        };\r\n        /**\r\n         * Public request method\r\n         *\r\n         * @param args Request arguments\r\n         * @returns Request response\r\n         */\r\n        this.request = async (args) => {\r\n            if (!this._state.isConnected) {\r\n                throw eth_rpc_errors_1.ethErrors.provider.disconnected();\r\n            }\r\n            if (!args || typeof args !== 'object' || Array.isArray(args)) {\r\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\r\n                    message: 'Expected a single, non-array, object argument.',\r\n                    data: args,\r\n                });\r\n            }\r\n            const { method, params } = args;\r\n            if (typeof method !== 'string' || method.length === 0) {\r\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\r\n                    message: \"'method' property must be a non-empty string.\",\r\n                    data: args,\r\n                });\r\n            }\r\n            if (params !== undefined &&\r\n                !Array.isArray(params) &&\r\n                (typeof params !== 'object' || params === null)) {\r\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\r\n                    message: \"'params' property must be an object or array if provided.\",\r\n                    data: args,\r\n                });\r\n            }\r\n            return this._postMessage(communication_1.Messages.EXTERNAL.REQUEST, args);\r\n        };\r\n        /**\r\n         * Response handler\r\n         *\r\n         */\r\n        this.handleResponse = (data) => {\r\n            const handler = this._handlers[data.id];\r\n            if (!handler) {\r\n                loglevel_1.default.error('Unknown response', data);\r\n                return;\r\n            }\r\n            if (!handler.subscriber) {\r\n                delete this._handlers[data.id];\r\n            }\r\n            // check for subscription id in response\r\n            this.setEthSubscriptionsSubId(data);\r\n            if (data.subscription) {\r\n                handler.subscriber(data.subscription);\r\n            }\r\n            else if (data.error) {\r\n                // Deserialze error object\r\n                const parsedError = JSON.parse(data.error);\r\n                const err = new Error(parsedError.message);\r\n                // Validate error and reject promise\r\n                const valdatedErr = (0, errors_1.validateError)(err.message);\r\n                handler.reject(valdatedErr);\r\n            }\r\n            else {\r\n                handler.resolve(data.response);\r\n            }\r\n        };\r\n        this.enable = async () => {\r\n            this.deprecationWarning('ethereum.enable(...)', true);\r\n            const accounts = (await this._postMessage(communication_1.Messages.EXTERNAL.REQUEST, {\r\n                method: ethereum_1.JSONRPCMethod.eth_requestAccounts,\r\n            }));\r\n            return accounts;\r\n        };\r\n        /* ----------------------------------------------------------------------------- */\r\n        /* Provider setup\r\n        /* ----------------------------------------------------------------------------- */\r\n        /**\r\n         * Provider setup\r\n         *\r\n         */\r\n        this._setupProvider = async () => {\r\n            const { accounts, chainId, networkVersion } = await this._postMessage(communication_1.Messages.EXTERNAL.SETUP_PROVIDER);\r\n            if (chainId !== undefined && networkVersion !== undefined) {\r\n                this.networkVersion = networkVersion;\r\n                this.chainId = chainId;\r\n                this._connect({ chainId });\r\n            }\r\n            this._accountsChanged(accounts);\r\n        };\r\n        /**\r\n         * Subscribes to events updates\r\n         *\r\n         * @param cb update handler\r\n         */\r\n        this._eventSubscription = async (cb) => {\r\n            return this._postMessage(communication_1.Messages.EXTERNAL.EVENT_SUBSCRIPTION, undefined, cb);\r\n        };\r\n        /**\r\n         * Set favicon url\r\n         */\r\n        this._setIcon = async () => {\r\n            const iconURL = await (0, site_1.getIconData)();\r\n            if (iconURL) {\r\n                this._postMessage(communication_1.Messages.EXTERNAL.SET_ICON, {\r\n                    iconURL,\r\n                });\r\n            }\r\n        };\r\n        /* ----------------------------------------------------------------------------- */\r\n        /* Requests utils\r\n        /* ----------------------------------------------------------------------------- */\r\n        /**\r\n         * Post a message using the window object, to be listened by the content script\r\n         *\r\n         * @param message External method to use\r\n         * @param request Request parameters\r\n         * @param subscriber Subscription callback\r\n         * @returns Promise with the response\r\n         */\r\n        this._postMessage = (message, request, subscriber, reqId) => {\r\n            return new Promise((resolve, reject) => {\r\n                const id = reqId || `${Date.now()}.${++this._requestId}`;\r\n                this._handlers[id] = { reject, resolve, subscriber };\r\n                // If request is a subscription,\r\n                // store it for resubscription in case the SW is terminated\r\n                const updatedReq = this._checkForEthSubscriptions(message, request, id);\r\n                window.postMessage({\r\n                    id,\r\n                    message,\r\n                    origin: communication_1.Origin.PROVIDER,\r\n                    request: updatedReq ?? (request || {}),\r\n                }, window.location.href);\r\n            });\r\n        };\r\n        /**\r\n         * Synchronous RPC request\r\n         *\r\n         */\r\n        this._sendJSONRPCRequest = (request) => {\r\n            const response = {\r\n                jsonrpc: '2.0',\r\n                id: request.id,\r\n            };\r\n            response.result = this._handleSynchronousMethods(request);\r\n            if (response.result === undefined) {\r\n                throw new Error(`Please provide a callback parameter to call ${request.method} ` +\r\n                    'asynchronously.');\r\n            }\r\n            return response;\r\n        };\r\n        this._sendMultipleRequestsAsync = (requests) => {\r\n            return Promise.all(requests.map((r) => this._sendRequestAsync(r)));\r\n        };\r\n        this._sendRequestAsync = (request) => {\r\n            return new Promise((resolve, reject) => {\r\n                this._handleAsynchronousMethods(request)\r\n                    .then((res) => {\r\n                    resolve(res);\r\n                })\r\n                    .catch((err) => reject(err));\r\n            });\r\n        };\r\n        /**\r\n         * Synchronous methods handler\r\n         *\r\n         */\r\n        this._handleSynchronousMethods = (request) => {\r\n            const { method } = request;\r\n            switch (method) {\r\n                case ethereum_1.JSONRPCMethod.eth_accounts:\r\n                    return this.selectedAddress ? [this.selectedAddress] : [];\r\n                case ethereum_1.JSONRPCMethod.eth_coinbase:\r\n                    return this.selectedAddress || null;\r\n                case ethereum_1.JSONRPCMethod.net_version:\r\n                    return this.networkVersion || null;\r\n                default:\r\n                    return undefined;\r\n            }\r\n        };\r\n        /**\r\n         * Asynchronous methods handler\r\n         *\r\n         */\r\n        this._handleAsynchronousMethods = async (request) => {\r\n            const response = {\r\n                jsonrpc: '2.0',\r\n                id: request.id,\r\n            };\r\n            response.result = await this._postMessage(communication_1.Messages.EXTERNAL.REQUEST, {\r\n                method: request.method,\r\n                params: request.params,\r\n            });\r\n            return response;\r\n        };\r\n        /* ----------------------------------------------------------------------------- */\r\n        /* Events\r\n        /* ----------------------------------------------------------------------------- */\r\n        this._eventHandler = ({ eventName, payload, }) => {\r\n            switch (eventName) {\r\n                case types_1.ProviderEvents.connect:\r\n                    this._connect(payload);\r\n                    break;\r\n                case types_1.ProviderEvents.disconnect:\r\n                    this._disconnect(payload);\r\n                    break;\r\n                case types_1.ProviderEvents.chainChanged:\r\n                    this._chainChanged(payload);\r\n                    break;\r\n                case types_1.ProviderEvents.accountsChanged:\r\n                    this._accountsChanged(payload);\r\n                    break;\r\n                case types_1.ProviderEvents.message:\r\n                    this._emitSubscriptionMessage(payload);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n        this._connect = (connectInfo) => {\r\n            this._state.isConnected = true;\r\n            this.emit(types_1.ProviderEvents.connect, connectInfo);\r\n        };\r\n        this._disconnect = (error = eth_rpc_errors_1.ethErrors.provider.disconnected()) => {\r\n            this._state.isConnected = false;\r\n            this.emit(types_1.ProviderEvents.disconnect, error);\r\n            /**\r\n             * @deprecated Alias of disconnect\r\n             */\r\n            this.emit(types_1.ProviderEvents.close, error);\r\n        };\r\n        this._chainChanged = ({ chainId, networkVersion }) => {\r\n            this._connect({ chainId });\r\n            if (chainId !== this.chainId) {\r\n                this.chainId = chainId;\r\n                this.networkVersion = networkVersion;\r\n                this.emit(types_1.ProviderEvents.chainChanged, chainId);\r\n                /**\r\n                 * @deprecated This was previously used with networkId instead of chainId,\r\n                 * we keep the interface but we enforce chainId anyways\r\n                 */\r\n                this.emit(types_1.ProviderEvents.networkChanged, chainId);\r\n                /**\r\n                 * @deprecated Alias of chainChanged\r\n                 */\r\n                this.emit(types_1.ProviderEvents.chainIdChanged, chainId);\r\n            }\r\n        };\r\n        this._accountsChanged = async (accounts) => {\r\n            if (accounts.length !== this._state.accounts.length ||\r\n                !accounts.every((val, index) => val === this._state.accounts[index])) {\r\n                this._state.accounts = accounts;\r\n                if (this.selectedAddress !== accounts[0]) {\r\n                    this.selectedAddress = accounts[0] || null;\r\n                }\r\n                this.emit(types_1.ProviderEvents.accountsChanged, accounts);\r\n            }\r\n        };\r\n        /**\r\n         * Emits to the consumers the message received via a previously\r\n         * initiated subscription.\r\n         *\r\n         * @param message The received subscription message\r\n         */\r\n        this._emitSubscriptionMessage = (message) => {\r\n            // re-write subscription id\r\n            for (const reqId in this._ethSubscriptions) {\r\n                const { prevSubId, subId } = this._ethSubscriptions[reqId];\r\n                if (message.data.subscription === subId &&\r\n                    prevSubId &&\r\n                    prevSubId !== '') {\r\n                    message = {\r\n                        ...message,\r\n                        data: {\r\n                            ...message.data,\r\n                            subscription: prevSubId,\r\n                        },\r\n                    };\r\n                    loglevel_1.default.trace('_emitSubscriptionMessage', 'message overridden', message);\r\n                    break;\r\n                }\r\n            }\r\n            this.emit(types_1.ProviderEvents.message, message);\r\n            // Emit events for legacy API\r\n            const web3LegacyResponse = {\r\n                jsonrpc: '2.0',\r\n                method: 'eth_subscription',\r\n                params: {\r\n                    result: message.data.result,\r\n                    subscription: message.data.subscription,\r\n                },\r\n            };\r\n            this.emit(types_1.ProviderEvents.data, web3LegacyResponse);\r\n            this.emit(types_1.ProviderEvents.notification, web3LegacyResponse.params.result);\r\n        };\r\n        /**\r\n         * Adds the new subscription id to the ethSubscriptions dictionary.\r\n         *\r\n         */\r\n        this.setEthSubscriptionsSubId = (data) => {\r\n            if ('id' in data && data.id in this._ethSubscriptions) {\r\n                loglevel_1.default.trace('setEthSubscriptionsSubId', 'found', this._ethSubscriptions[data.id], data.response);\r\n                this._ethSubscriptions[data.id].subId = data.response;\r\n            }\r\n        };\r\n        this._state = {\r\n            accounts: [],\r\n            isConnected: true,\r\n        };\r\n        this.chainId = null;\r\n        this.selectedAddress = null;\r\n        this.networkVersion = null;\r\n        this._handlers = {};\r\n        this._requestId = 0;\r\n        const cachedCompatibility = (0, compatibility_1.getBlockWalletCompatibility)();\r\n        this.isBlockWallet = cachedCompatibility.isBlockWallet ?? true;\r\n        this._ethSubscriptions = {};\r\n        // Metamask compatibility\r\n        this.isMetaMask = !this.isBlockWallet;\r\n        this._updateSiteCompatibility();\r\n        this.autoRefreshOnNetworkChange = false;\r\n        this._metamask = {\r\n            isEnabled: () => true,\r\n            isApproved: async () => true,\r\n            isUnlocked: async () => true,\r\n        };\r\n        // Bind non arrow functions\r\n        this.send = this.send.bind(this);\r\n        this.sendAsync = this.sendAsync.bind(this);\r\n        // Setup provider\r\n        this._setupProvider();\r\n        // Subscribe to state updates\r\n        this._eventSubscription(this._eventHandler);\r\n        // Set maximum amount of event listeners\r\n        this.setMaxListeners(MAX_EVENT_LISTENERS);\r\n        // Set site icon\r\n        this._setIcon();\r\n    }\r\n    /**\r\n     * This method checks whether the current page is compatible with BlockWallet.\r\n     * If the site is not compatible, the isBlockWallet flag will be set to false when injecting the provider and isMetamask will be true.\r\n     */\r\n    async _updateSiteCompatibility() {\r\n        const providerConfig = await this._postMessage(communication_1.Messages.EXTERNAL.GET_PROVIDER_CONFIG);\r\n        const { isBlockWallet } = (0, compatibility_1.updateBlockWalletCompatibility)(providerConfig.incompatibleSites);\r\n        this.isBlockWallet = isBlockWallet;\r\n        this.isMetaMask = !isBlockWallet;\r\n    }\r\n    async reInitializeSubscriptions() {\r\n        loglevel_1.default.trace('reInitializeSubscriptions', 'init', this._ethSubscriptions);\r\n        for (const reqId in this._ethSubscriptions) {\r\n            const { params, subId, prevSubId } = this._ethSubscriptions[reqId];\r\n            const request = {\r\n                method: ethereum_1.JSONRPCMethod.eth_subscribe,\r\n                params,\r\n            };\r\n            loglevel_1.default.trace(reqId, 'request', request);\r\n            await this._postMessage(communication_1.Messages.EXTERNAL.REQUEST, request, undefined, reqId);\r\n            this._ethSubscriptions[reqId].prevSubId =\r\n                prevSubId && prevSubId !== '' ? prevSubId : subId;\r\n        }\r\n        loglevel_1.default.trace('reInitializeSubscriptions', 'end', this._ethSubscriptions);\r\n    }\r\n    /**\r\n     * handleSignal\r\n     *\r\n     * Handles a signal\r\n     *\r\n     * @param signal The signal received\r\n     */\r\n    handleSignal(signal) {\r\n        switch (signal) {\r\n            case types_1.Signals.SW_REINIT:\r\n                this._eventSubscription(this._eventHandler);\r\n                this.reInitializeSubscriptions();\r\n                break;\r\n            default:\r\n                loglevel_1.default.debug('Unrecognized signal received');\r\n                break;\r\n        }\r\n    }\r\n    send(requestOrMethod, callbackOrParams) {\r\n        this.deprecationWarning('ethereum.send(...)', true);\r\n        // send<T>(method, params): Promise<T>\r\n        if (typeof requestOrMethod === 'string') {\r\n            const method = requestOrMethod;\r\n            const params = Array.isArray(callbackOrParams)\r\n                ? callbackOrParams\r\n                : callbackOrParams !== undefined\r\n                    ? [callbackOrParams]\r\n                    : [];\r\n            const request = {\r\n                method,\r\n                params,\r\n            };\r\n            const response = this._postMessage(communication_1.Messages.EXTERNAL.REQUEST, request);\r\n            return response;\r\n        }\r\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\r\n        if (typeof callbackOrParams === 'function') {\r\n            const request = requestOrMethod;\r\n            const callback = callbackOrParams;\r\n            return this.sendAsync(request, callback);\r\n        }\r\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\r\n        if (Array.isArray(requestOrMethod)) {\r\n            const requests = requestOrMethod;\r\n            return requests.map((r) => this._sendJSONRPCRequest(r));\r\n        }\r\n        // send(JSONRPCRequest): JSONRPCResponse\r\n        const req = requestOrMethod;\r\n        return this._sendJSONRPCRequest(req);\r\n    }\r\n    sendAsync(request, callback) {\r\n        this.deprecationWarning('ethereum.sendAsync(...)', true);\r\n        if (typeof callback !== 'function') {\r\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\r\n                message: 'A callback is required',\r\n            });\r\n        }\r\n        // send(JSONRPCRequest[], callback): void\r\n        if (Array.isArray(request)) {\r\n            const arrayCb = callback;\r\n            this._sendMultipleRequestsAsync(request)\r\n                .then((responses) => arrayCb(null, responses))\r\n                .catch((err) => arrayCb(err, null));\r\n            return;\r\n        }\r\n        // send(JSONRPCRequest, callback): void\r\n        const cb = callback;\r\n        this._sendRequestAsync(request)\r\n            .then((response) => cb(null, response))\r\n            .catch((err) => cb(err, null));\r\n    }\r\n    _checkForEthSubscriptions(message, request, id) {\r\n        if (!request) {\r\n            return undefined;\r\n        }\r\n        // @ts-ignore\r\n        if (message === communication_1.EXTERNAL.REQUEST && request && 'method' in request) {\r\n            if (request.method === ethereum_1.JSONRPCMethod.eth_subscribe) {\r\n                // Store request params for SW reinit\r\n                this._ethSubscriptions[id] = {\r\n                    params: request.params,\r\n                    subId: '',\r\n                    prevSubId: '',\r\n                };\r\n            }\r\n            else if (request.method === ethereum_1.JSONRPCMethod.eth_unsubscribe) {\r\n                // If this is an unsubscription, remove from the list so we won't\r\n                // subscribe again on SW termination\r\n                const [subscriptionId] = request.params;\r\n                let subIdToUnsubscribe = subscriptionId;\r\n                for (const reqId in this._ethSubscriptions) {\r\n                    const { subId, prevSubId } = this._ethSubscriptions[reqId];\r\n                    if (subId === subIdToUnsubscribe ||\r\n                        prevSubId === subIdToUnsubscribe) {\r\n                        subIdToUnsubscribe = subId;\r\n                        delete this._ethSubscriptions[reqId];\r\n                        break;\r\n                    }\r\n                }\r\n                loglevel_1.default.trace('eth_unsubscribe', 'subIdToUnsubscribe', subIdToUnsubscribe, this._ethSubscriptions);\r\n                return {\r\n                    method: request.method,\r\n                    params: [subIdToUnsubscribe],\r\n                };\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Prints a console.warn message to warn the user about usage of a deprecated API\r\n     * @param eventName The eventName\r\n     */\r\n    deprecationWarning(methodName, force = false) {\r\n        const deprecatedMethods = [\r\n            'close',\r\n            'data',\r\n            'networkChanged',\r\n            'chainIdChanged',\r\n            'notification',\r\n        ];\r\n        if (deprecatedMethods.includes(methodName) || force) {\r\n            loglevel_1.default.warn(`BlockWallet: '${methodName}' is deprecated and may be removed in the future. See: https://eips.ethereum.org/EIPS/eip-1193`);\r\n        }\r\n    }\r\n    /// EventEmitter overrides\r\n    addListener(eventName, listener) {\r\n        this.deprecationWarning(eventName);\r\n        return super.addListener(eventName, listener);\r\n    }\r\n    on(eventName, listener) {\r\n        this.deprecationWarning(eventName);\r\n        return super.on(eventName, listener);\r\n    }\r\n    once(eventName, listener) {\r\n        this.deprecationWarning(eventName);\r\n        return super.once(eventName, listener);\r\n    }\r\n    prependListener(eventName, listener) {\r\n        this.deprecationWarning(eventName);\r\n        return super.prependListener(eventName, listener);\r\n    }\r\n    prependOnceListener(eventName, listener) {\r\n        this.deprecationWarning(eventName);\r\n        return super.prependOnceListener(eventName, listener);\r\n    }\r\n}\r\nexports[\"default\"] = BlankProvider;\r\n\n\n/***/ }),\n\n/***/ \"./src/types.ts\":\n/*!**********************!*\\\n  !*** ./src/types.ts ***!\n  \\**********************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Signals = exports.ProviderEvents = void 0;\r\n// Provider events\r\nvar ProviderEvents;\r\n(function (ProviderEvents) {\r\n    ProviderEvents[\"accountsChanged\"] = \"accountsChanged\";\r\n    ProviderEvents[\"chainChanged\"] = \"chainChanged\";\r\n    ProviderEvents[\"connect\"] = \"connect\";\r\n    ProviderEvents[\"disconnect\"] = \"disconnect\";\r\n    ProviderEvents[\"message\"] = \"message\";\r\n    /**\r\n     * close\r\n     *\r\n     * @deprecated Deprecated Web3 subscription event\r\n     */\r\n    ProviderEvents[\"close\"] = \"close\";\r\n    /**\r\n     * notification\r\n     *\r\n     * @deprecated Deprecated Web3 subscription event\r\n     */\r\n    ProviderEvents[\"notification\"] = \"notification\";\r\n    /**\r\n     * data\r\n     *\r\n     * @deprecated Deprecated Web3 subscription event\r\n     */\r\n    ProviderEvents[\"data\"] = \"data\";\r\n    /**\r\n     * networkChanged\r\n     *\r\n     * @deprecated Deprecated network change event\r\n     */\r\n    ProviderEvents[\"networkChanged\"] = \"networkChanged\";\r\n    /**\r\n     * chainIdChanged\r\n     *\r\n     * @deprecated Deprecated network change event\r\n     */\r\n    ProviderEvents[\"chainIdChanged\"] = \"chainIdChanged\";\r\n})(ProviderEvents = exports.ProviderEvents || (exports.ProviderEvents = {}));\r\nvar Signals;\r\n(function (Signals) {\r\n    Signals[\"SW_REINIT\"] = \"SW_REINIT\";\r\n})(Signals = exports.Signals || (exports.Signals = {}));\r\n\n\n/***/ }),\n\n/***/ \"./src/utils/compatibility.ts\":\n/*!************************************!*\\\n  !*** ./src/utils/compatibility.ts ***!\n  \\************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.updateBlockWalletCompatibility = exports.getBlockWalletCompatibility = void 0;\r\nconst site_1 = __webpack_require__(/*! ./site */ \"./src/utils/site.ts\");\r\nconst incompatible_sites_json_1 = __importDefault(__webpack_require__(/*! @block-wallet/remote-configs/provider/incompatible_sites.json */ \"./node_modules/@block-wallet/remote-configs/provider/incompatible_sites.json\"));\r\nconst BLOCKWALLET_COMPATIBLITY_KEY = '__BlockWallet_compatibility__';\r\nfunction getCompatibility() {\r\n    const cache = window.localStorage.getItem(BLOCKWALLET_COMPATIBLITY_KEY);\r\n    if (cache) {\r\n        return JSON.parse(cache);\r\n    }\r\n    return null;\r\n}\r\nfunction setCompatibility(isBlockWallet) {\r\n    return window.localStorage.setItem(BLOCKWALLET_COMPATIBLITY_KEY, JSON.stringify({ isBlockWallet }));\r\n}\r\nfunction getBlockWalletCompatibility() {\r\n    const compatibility = getCompatibility();\r\n    if (compatibility) {\r\n        return compatibility;\r\n    }\r\n    return updateBlockWalletCompatibility(incompatible_sites_json_1.default);\r\n}\r\nexports.getBlockWalletCompatibility = getBlockWalletCompatibility;\r\nfunction updateBlockWalletCompatibility(incompatibleSites = incompatible_sites_json_1.default) {\r\n    const isBlockWallet = (0, site_1.isCompatible)(incompatibleSites);\r\n    setCompatibility(isBlockWallet);\r\n    return { isBlockWallet };\r\n}\r\nexports.updateBlockWalletCompatibility = updateBlockWalletCompatibility;\r\n\n\n/***/ }),\n\n/***/ \"./src/utils/errors.ts\":\n/*!*****************************!*\\\n  !*** ./src/utils/errors.ts ***!\n  \\*****************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.validateError = void 0;\r\nconst ethereum_1 = __webpack_require__(/*! @block-wallet/background/utils/types/ethereum */ \"../background/src/utils/types/ethereum.ts\");\r\nconst eth_rpc_errors_1 = __webpack_require__(/*! eth-rpc-errors */ \"./node_modules/eth-rpc-errors/dist/index.js\");\r\n/**\r\n * Parse error messages\r\n *\r\n */\r\nconst validateError = (error) => {\r\n    switch (error) {\r\n        case ethereum_1.ProviderError.INVALID_PARAMS:\r\n            return eth_rpc_errors_1.ethErrors.rpc.invalidParams();\r\n        case ethereum_1.ProviderError.RESOURCE_UNAVAILABLE:\r\n            return eth_rpc_errors_1.ethErrors.rpc.resourceUnavailable();\r\n        case ethereum_1.ProviderError.TRANSACTION_REJECTED:\r\n            return eth_rpc_errors_1.ethErrors.provider.userRejectedRequest({\r\n                message: 'User rejected transaction',\r\n            });\r\n        case ethereum_1.ProviderError.UNAUTHORIZED:\r\n            return eth_rpc_errors_1.ethErrors.provider.unauthorized();\r\n        case ethereum_1.ProviderError.UNSUPPORTED_METHOD:\r\n            return eth_rpc_errors_1.ethErrors.provider.unsupportedMethod();\r\n        case ethereum_1.ProviderError.USER_REJECTED_REQUEST:\r\n            return eth_rpc_errors_1.ethErrors.provider.userRejectedRequest();\r\n        default:\r\n            return eth_rpc_errors_1.ethErrors.rpc.internal(error);\r\n    }\r\n};\r\nexports.validateError = validateError;\r\n\n\n/***/ }),\n\n/***/ \"./src/utils/shimWeb3.ts\":\n/*!*******************************!*\\\n  !*** ./src/utils/shimWeb3.ts ***!\n  \\*******************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\"));\r\n/**\r\n * If no existing window.web3 is found, this function injects a web3 \"shim\" to\r\n * not break dapps that rely on window.web3.currentProvider.\r\n *\r\n * @param provider - The provider to set as window.web3.currentProvider.\r\n */\r\nconst shimWeb3 = (provider) => {\r\n    let loggedCurrentProvider = false;\r\n    let loggedMissingProperty = false;\r\n    if (!window.web3) {\r\n        const SHIM_IDENTIFIER = 'isBlockWalletShim__';\r\n        let web3Shim = { currentProvider: provider };\r\n        Object.defineProperty(web3Shim, SHIM_IDENTIFIER, {\r\n            value: true,\r\n            enumerable: true,\r\n            configurable: false,\r\n            writable: false,\r\n        });\r\n        web3Shim = new Proxy(web3Shim, {\r\n            get: (target, property, ...args) => {\r\n                if (property === 'currentProvider' && !loggedCurrentProvider) {\r\n                    loggedCurrentProvider = true;\r\n                    loglevel_1.default.warn('You are accessing the BlockWallet window.web3.currentProvider shim. This property is deprecated; use window.ethereum instead.');\r\n                }\r\n                else if (property !== 'currentProvider' &&\r\n                    property !== SHIM_IDENTIFIER &&\r\n                    !loggedMissingProperty) {\r\n                    loggedMissingProperty = true;\r\n                    loglevel_1.default.error('Web3 is not injected');\r\n                }\r\n                return Reflect.get(target, property, ...args);\r\n            },\r\n            set: (...args) => {\r\n                loglevel_1.default.warn('You are accessing the BlockWallet window.web3 shim. This object is deprecated; use window.ethereum instead.');\r\n                return Reflect.set(...args);\r\n            },\r\n        });\r\n        Object.defineProperty(window, 'web3', {\r\n            value: web3Shim,\r\n            enumerable: false,\r\n            configurable: true,\r\n            writable: true,\r\n        });\r\n    }\r\n};\r\nexports[\"default\"] = shimWeb3;\r\n\n\n/***/ }),\n\n/***/ \"./src/utils/site.ts\":\n/*!***************************!*\\\n  !*** ./src/utils/site.ts ***!\n  \\***************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getIconData = exports.checkScriptLoad = exports.isCompatible = void 0;\r\n/**\r\n * Check if the site is on the list of incompatibleSites\r\n */\r\nconst isCompatible = (incompatibleSites) => {\r\n    for (let i = 0; i < incompatibleSites.length; i++) {\r\n        if (window.location.hostname === incompatibleSites[i] ||\r\n            window.location.hostname.endsWith('.' + incompatibleSites[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nexports.isCompatible = isCompatible;\r\n/**\r\n * Check for unallowed file extension\r\n */\r\nconst checkExtension = () => {\r\n    const fileExtensions = [/\\.xml$/u, /\\.pdf$/u];\r\n    for (let i = 0; i < fileExtensions.length; i++) {\r\n        if (fileExtensions[i].test(window.location.pathname)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * Checks the documentElement of the current document\r\n */\r\nconst documentElementCheck = () => {\r\n    const documentElement = window.document.documentElement.nodeName;\r\n    if (documentElement) {\r\n        return documentElement.toLowerCase() === 'html';\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * Checks the doctype of the current document if it exists\r\n */\r\nconst checkDocType = () => {\r\n    const { doctype } = window.document;\r\n    if (doctype) {\r\n        return doctype.name === 'html';\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * Helper function with checks to do before loading the script\r\n */\r\nconst checkScriptLoad = () => {\r\n    return checkDocType() && checkExtension() && documentElementCheck();\r\n};\r\nexports.checkScriptLoad = checkScriptLoad;\r\n/**\r\n * Returns site favicon data\r\n */\r\nconst getIconData = async () => {\r\n    return new Promise((resolve) => {\r\n        if (document.readyState === 'complete' ||\r\n            document.readyState === 'interactive') {\r\n            resolve(getIconFromDom());\r\n        }\r\n        else {\r\n            const domContentLoadedHandler = async () => {\r\n                resolve(getIconFromDom());\r\n                window.removeEventListener('DOMContentLoaded', domContentLoadedHandler);\r\n            };\r\n            window.addEventListener('DOMContentLoaded', domContentLoadedHandler);\r\n        }\r\n    });\r\n};\r\nexports.getIconData = getIconData;\r\n/**\r\n * Extracts an icon for the site from the DOM\r\n *\r\n * @returns Icon url or null if there isn't a valid one\r\n */\r\nconst getIconFromDom = async () => {\r\n    const { document } = window;\r\n    const icons = document.querySelectorAll('head > link[rel~=\"icon\"]');\r\n    for (const icon of icons) {\r\n        if (icon && (await isValidImage(icon.href))) {\r\n            return icon.href;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Checks if the given image loads correctly\r\n *\r\n * @param url Image source\r\n */\r\nconst isValidImage = async (url) => {\r\n    const img = document.createElement('img');\r\n    const isValid = await new Promise((resolve) => {\r\n        try {\r\n            img.onload = () => resolve(true);\r\n            img.onerror = () => resolve(false);\r\n            img.src = url;\r\n        }\r\n        catch (error) {\r\n            resolve(false);\r\n        }\r\n    });\r\n    img.remove();\r\n    return isValid;\r\n};\r\n\n\n/***/ }),\n\n/***/ \"./node_modules/@block-wallet/remote-configs/provider/incompatible_sites.json\":\n/*!************************************************************************************!*\\\n  !*** ./node_modules/@block-wallet/remote-configs/provider/incompatible_sites.json ***!\n  \\************************************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = JSON.parse('[\"cryptopunt.com\",\"crystl.finance\",\"degate.com\",\"dydx.exchange\",\"etherscan.io\",\"guild.xyz\",\"hawku.com\",\"illuvium.io\",\"immutable.com\",\"mcdex.io\",\"oncyber.io\",\"opensea.io\",\"otherside.xyz\",\"pegaxy.io\",\"phantomgalaxies.com\",\"polymarket.com\",\"railgun.ch\",\"scrt.network\",\"spiritswap.finance\",\"syntropynet.com\",\"zed.run\",\"zk.money\",\"manifold.xyz\",\"orionprotocol.io\",\"portal.zksync.io\",\"stargate.finance\",\"bookmaker.xyz\",\"labs.zetachain.com\"]');\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module is referenced by other modules so it can't be inlined\n/******/ \tvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n/******/ \t\n/******/ })()\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/content.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,